<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Arrays - Definition &amp; Usage | AutoHotkey</title>
<meta name="description" content="Arrays are either data structures consisting of a collection of values, each identified by one key, or a collection of sequentially numbered variables." />
<meta name="ahk:equiv-v2" content="objects/Array.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>배열</h1>
<p>In AutoHotkey, there are two different types of things that are related to arrays:</p>
<ul>
  <li><a href="#object-based">Object-based Arrays</a></li>
  <li><a href="#pseudo">Pseudo-Arrays</a> (not recommended for use)</li>
</ul>
<p class="note"><strong>주의</strong>: The following code examples show different approaches which lead to the same end result.</p>

<h2 id="object-based">Object-based Arrays <span class="ver">[AHK_L 31+]</span></h2>
<p>Such arrays can be <a href="../Objects.htm#Usage_Associative_Arrays">associative arrays</a> or <a href="../Objects.htm#Usage_Simple_Arrays">simple arrays</a>. Associative arrays are created using the Object function or the brace syntax, while simple arrays are created using the array function or bracket syntax. For more information, see the <a href="../Tutorial.htm#s7">AutoHotkey Beginner Tutorial</a> or the <a href="../Objects.htm">Objects page</a>.</p>

<p>The following example shows the usage of a simple array:</p>
<pre><em>; 배열을 생성합니다. 최초는 비어 있습니다:</em>
Array := [] <em>; or Array := Array()</em>

<em>; 배열에 씁니다:</em>
Loop, Read, %A_WinDir%\system.ini <em>; 이 회돌이는 파일로부터 각 줄을 한 번에 하나씩 열람합니다.</em>
{
    Array.Push(A_LoopReadLine) <em>; 이 줄을 배열에 추가합니다.</em>
}

<em>; 배열로부터 읽습니다:
; Loop % Array.MaxIndex()   ; 좀 전통적인 접근법.</em>
for index, element in Array <em>; Enumeration is the recommended approach in most cases.</em>
{
    <em>; "Loop"를 사용하면, 인덱스는 1 부터 배열의 원소의 개수까지.
    ; 연속적인 숫자가 되어야 합니다 (또는 회돌이 안에서 계산되어야 합니다).
    ; MsgBox % "Element number " . A_Index . " is " . Array[A_Index]

    ; "for"를 사용하면, 인덱스 (또는 "키")와 그에 연관된 값이 제공됩니다
    ; 그리고 인덱스는 선택에 따라 *어떤 값이든* 될 수 있습니다.</em>
    MsgBox % "Element number " . index . " is " . element
}</pre>
<p>이 정도는 <a href="../Objects.htm">객체</a>가 제공하는 <a href="../lib/Object.htm">기능의</a> 일부만 보여줄 뿐입니다. 항목을 설정, 열람, 삽입, 제거 그리고 열거할 수 있습니다. 문자열과 객체는 숫자와 더불어 키로 사용할 수 있습니다. 객체는 값으로 다른 객체에 저장하고 함수의 매개변수 또는 반환 값으로 건넬 수 있습니다. 객체는 또 새로운 기능으로 <a href="../Objects.htm#Custom_Objects">확장</a>할 수 있습니다.</p>
<p>Though Push() and enumerators have their uses, some users might find it easier to use the more traditional approach (the commented out lines are the counterparts using the <a href="#pseudo">pseudo-arrays</a> described below):</p>
<pre>
  <em>; 각 배열은 사용하기 전에 초기화해야 합니다:</em>
  Array := []

<em>; Array%j% := A_LoopField</em>
  Array[j] := A_LoopField

<em>; Array%j%_%k% := A_LoopReadLine</em>
  Array[j, k] := A_LoopReadLine

  ArrayCount := 0
  Loop, Read, %A_WinDir%\system.ini
  {
      ArrayCount += 1
    <em>; Array%ArrayCount% := A_LoopReadLine</em>
      Array[ArrayCount] := A_LoopReadLine
  }

  Loop % ArrayCount
  {
    <em>; element := Array%A_Index%</em>
      element := Array[A_Index]
    <em>; MsgBox % "Element number " . A_Index . " is " . Array%A_Index%</em>
      MsgBox % "Element number " . A_Index . " is " . Array[A_Index]
  }
</pre>
<p><i>ArrayCount</i>는 편의를 위해 변수로 남겨 두었지만, 배열 자체에 <code>Array.Count := <i>n</i></code>로 저장하거나 아니면 제거하고 그 자리에 <code>Array.<a href="../lib/Object.htm#MinMaxIndex">MaxIndex</a>()</code>를 사용해도 됩니다. 시작 위치를 1 말고 다른 것으로 하고 싶다면, <code>Array.<a href="../lib/Object.htm#MinMaxIndex">MinIndex</a>()</code>를 사용할 수 있습니다.</p>

<h2 id="pseudo">의사-배열</h2>
  <p class="note"><strong>주의</strong>: If possible, always use the object-based array mentioned above. It is superior to a pseudo-array in almost every aspect: it is space-saving, more flexible, clearer, and similar to many other programming languages.</p>
<p>의사 배열은 대단히 개념적입니다: 각 배열은 실제로 그저 연속적으로 번호가 붙은, 그리고 각각 배열의 <em>원소</em>로 인지되는 <a href="../Variables.htm">변수</a>나 <a href="../Functions.htm">함수</a> 집단에 불과합니다. 오토핫키는 이 원소들을 어떤 식으로든 하나로 연결하지 않습니다.</p>
<p><a href="../lib/StringSplit.htm">StringSplit</a>과 <a href="../lib/WinGet.htm#List">WinGet List</a>같은 배열-생성 명령어 말고도, OutputVar를 받는 명령어나 값을 변수에 할당하는 명령어라면 무엇이든 배열을 생성하는데 사용할 수 있습니다. 가장 간단한 예는 아래에 보여주는 바와 같이 <a href="../lib/SetExpression.htm">할당 연산자 (:=)</a>입니다:</p>
<pre>Array%j% := A_LoopField</pre>
<p>다차원 배열은 선택한 가름 문자를 인덱스 사이에 사용하면 가능합니다. 예를 들어:</p>
<pre>Array%j%_%k% := A_LoopReadLine</pre>
<p>다음 예제는 배열을 만들고 접근하는 법을 보여줍니다. 이 경우 배열은 텍스트로부터 열람한 일련의 이름입니다:</p>
<pre><em><strong>; 배열에 쓰기:</strong></em>
ArrayCount := 0
Loop, Read, %A_WinDir%\system.ini   <em>; 이 회돌이는 파일로부터 각 줄을 한 번에 하나씩 열람합니다.</em>
{
    ArrayCount += 1  <em>; 배열에 얼마나 많은 항목이 있는 추적 관리합니다.</em>
    Array%ArrayCount% := A_LoopReadLine  <em>; 이 줄을 다음 배열 원소에 저장합니다.</em>
}

<em><strong>; 배열로부터 읽습니다:</strong></em>
Loop %ArrayCount%
{
    <em>; 다음 줄은 := 연산자를 사용하여 배열 원소를 열람합니다:</em>
    element := Array%A_Index%  <em>; <a href="../Variables.htm#Index">A_Index</a>는 내장 변수입니다.</em>
    <em>; 다른 방법으로, "% " 접두사를 사용하여 MsgBox나 기타 다른 명령어를 <a href="../Variables.htm#Expressions">표현식</a>으로 만듭니다:</em>
    MsgBox % "Element number " . A_Index . " is " . Array%A_Index%
}</pre>
<p>배열에 관련된 개념은 <a href="../lib/NumPut.htm">NumPut()</a>과 <a href="../lib/NumGet.htm">NumGet()</a>을 사용해 이진 형태의 숫자 집단을 저장하고 열람하는 것입니다. 이것은 수행성능과 메모리 보전이 중요한 경우에 도움이 될 수 있습니다.</p>

</body>
</html>
