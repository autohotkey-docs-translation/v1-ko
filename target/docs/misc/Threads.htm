<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Threads - Behaviour &amp; Priority | AutoHotkey</title>
<meta name="description" content='"현재 쓰레드"는 최근의 이벤트가 요청한 실행 흐름으로 정의됩니다; 예로는 핫키, SetTimer 서브루틴, 맞춤 메뉴 항목, 그리고 GUI 이벤트가 포함됩니다.' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>쓰레드</h1>

<p><em>현재 쓰레드</em>는 최근의 이벤트가 요청한 실행 흐름으로 정의됩니다; 예로는 <a href="../Hotkeys.htm">핫키</a>, <a href="../lib/SetTimer.htm">SetTimer 서브루틴</a>, <a href="../lib/Menu.htm">맞춤 메뉴 항목</a>, 그리고 <a href="../lib/Gui.htm#Events">GUI 이벤트</a>가 포함됩니다. <em>현재 쓰레드</em>는 자신의 서브루틴 안 또는 그 서브루틴을 호출한 다른 서브루틴 안에서 명령어를 실행할 수 있습니다.</p>
<p>오토핫키는 실제로 다중 스레드를 사용하지 않지만, 그 몇 가지 행위는 흉내를 냅니다: 두 번째 쓰레드가 시작되면 -- 예를 들어 이전의 핫키가 여전히 실행 중인 동안 또다른 핫키를 눌러서 -- <em>현재 쓰레드</em>가 인터럽트 되어 (임시로 정지되어) 새 쓰레드가 <em>현재 쓰레드</em>가 됩니다. 두 번째 쓰레드가 실행 중인 동안 세 번째 쓰레드가 시작되면, 첫 번째와 두 번째 쓰레드 모두 동면 상태로 들어갑니다. 등등.</p>
<p><em>현재 쓰레드</em>가 끝나면, 가장 최근에 인터럽트된 쓰레드가 재개됩니다. 등등. 모든 쓰레드가 결국 다 끝날 때까지 계속됩니다. 재개되면, <a href="ErrorLevel.htm">ErrorLevel</a>과 <a href="../lib/SendMode.htm">SendMode</a>에 대한 쓰레드의 설정이 자동으로 인터럽트 전과 똑 같은 상태로 복구됩니다; 다른 말로, 쓰레드는 인터럽트 되어도 부작용을 경험하지 않습니다 (단, <a href="../lib/WinActivate.htm">활성 창</a>에 가한 변경은 예외입니다).</p>
<p class="note"><strong>주의</strong>: <a href="../lib/KeyHistory.htm">KeyHistory</a> 명령어/메뉴-항목은 얼마나 많은 쓰레드가 인터럽드된 상태에 있는지를 보여줍니다. <a href="../lib/ListHotkeys.htm">ListHotkeys</a> 명령어/메뉴-항목은 어느 핫키가 쓰레드를 가졌는지 보여줍니다.</p>
<p>스크립트 하나가 동시에 <a href="../lib/MsgBox.htm">MsgBox</a>, <a href="../lib/InputBox.htm">InputBox</a>, <a href="../lib/FileSelectFile.htm">FileSelectFile</a>, 그리고 <a href="../lib/FileSelectFolder.htm">FileSelectFolder</a> 대화상자를 여러 개 가질 수 있습니다. 이전 쓰레드가 이미 대화상자를 보여주고 있는 동안에 (<a href="../Hotkeys.htm">핫키</a>, <a href="../lib/SetTimer.htm">시간제한 서브루틴</a>, <a href="../lib/Menu.htm">맞춤 메뉴 항목</a>, 등등을 통하여.). 새 쓰레드를 또 기동하면 됩니다</p>
<p>기본값으로, 주어진 <a href="../Hotkeys.htm">핫키</a>나 <a href="../Hotstrings.htm">핫스트링</a> 서브루틴은 이미 실행 중이면 두 번째로 시작할 수 없습니다. 이 행위를 바꾸려면 <a href="../lib/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>를 사용하십시오.</p>
<p><strong>Related:</strong> The <a href="../lib/Thread.htm">Thread</a> command sets the priority or interruptibility of threads.</p>

<h2 id="Priority">쓰레드 우선 순위</h2>
<p>어떤 쓰레드이든 (<a href="../Hotkeys.htm">핫키</a>, <a href="../lib/SetTimer.htm">시간제한 서브루틴</a>, <a href="../lib/Menu.htm">맞춤 메뉴 항목</a>, 등등.) <em>현재 쓰레드</em>보다 우선 순위보다 낮으면 인터럽트 할 수 없습니다. 그 시간 동안, 타이머는 실행되지 않으며, 사용자가 (<a href="../Hotkeys.htm">핫키</a>나 <a href="../lib/GuiControls.htm#Button">GUI 버튼</a>을 눌러서) 새로운 쓰레드를 만들려는 시도도 아무 효과가 없습니다. 버퍼 처리조차 되지 않습니다. 이 때문에, 보통 최고 우선순위의 쓰레드를 빨리 끝내도록 설계하는 것이 가장 좋습니다. 아니면 최고 우선 순위를 주지 말고 <a href="../lib/Critical.htm">Critical</a>을 사용하십시오.</p>
<p>우선 순위 기본값은 0입니다. 모든 쓰레드는 기본 우선 순위를 사용합니다. 단, 다음 방식 중 하나 때문에 바뀌는 경우는 예외입니다:</p>
<ul>
  <li>시간제한 서브루틴은 <a href="../lib/SetTimer.htm">SetTimer</a>를 통하여 특정한 우선 순위가 부여됩니다.</li>
  <li>핫키는 <a href="../lib/Hotkey.htm">Hotkey</a> 명령어를 통하여 특정한 우선 순위가 부여됩니다.</li>
  <li><a href="../Hotstrings.htm">핫스트링</a>은 <a href="../lib/_Hotstring.htm">#Hotstring</a> 지시어를 통하여 또는 정의될 때 특정한 우선 순위가 부여됩니다.</li>
  <li>맞춤 메뉴 항목은 <a href="../lib/Menu.htm">Menu</a> 명령어를 통하여 특정 우선 순위가 부여됩니다.</li>
  <li><em>현재 쓰레드</em>는 <a href="../lib/Thread.htm">Thread</a> 명령어를 통하여 자신의 우선 순위를 지정합니다.</li>
</ul>
<p>The <a href="../lib/OnExit.htm">OnExit</a> thread (if any) will always run when called for, regardless of the <em>current thread</em>'s priority.</p>

<h2 id="Interrupt">Thread Interruptibility</h2>
<p>For most types of events, new threads are permitted to launch only if the current thread is <em>interruptible</em>. A thread can be <em>uninterruptible</em> for a number of reasons, including:</p>
<ul>
  <li>The thread has been marked as <em>critical</em>. <a href="../lib/Critical.htm">Critical</a> may have been called by the thread itself or from within the <a href="../Scripts.htm#auto">auto-execute section</a>.</li>
  <li>The thread has not been running long enough to meet the conditions for becoming interruptible, as set by <a href="../lib/Thread.htm#Interrupt">Thread Interrupt</a>.</li>
  <li>One of the script's menus is being displayed (such as the tray icon menu or a menu bar).</li>
  <li>A delay is being performed by <a href="../lib/Send.htm">Send</a> (most often due to <a href="../lib/SetKeyDelay.htm">SetKeyDelay</a>), <a href="../lib/WinActivate.htm">WinActivate</a>, or a <a href="Clipboard.htm">Clipboard</a> operation.</li>
  <li>An <a href="../lib/OnExit.htm">OnExit</a> thread is executing.</li>
  <li>A warning dialog is being displayed due to the <a href="../lib/_MaxHotkeysPerInterval.htm">#MaxHotkeysPerInterval</a> limit being reached, or due to a problem activating the keyboard or mouse hook (very rare).</li>
</ul>
<h3 id="Behave">Behavior of Uninterruptible Threads</h3>
<p>Unlike high-priority threads, events that occur while the thread is uninterruptible are not discarded. For example, if the user presses a <a href="../Hotkeys.htm">hotkey</a> while the current thread is uninterruptible, the hotkey is buffered indefinitely until the current thread finishes or becomes interruptible, at which time the hotkey is launched as a new thread.</p>
<p>Any thread may be interrupted in emergencies. 비상 시란 다음과 같이 구성됩니다: 1) an <a href="../lib/OnExit.htm#function">OnExit</a> callback; 2) any <a href="../lib/OnMessage.htm">OnMessage</a> function that monitors a message number less than 0x0312 (or a <a href="../lib/RegisterCallback.htm">callback</a> triggered by such a message); and 3) any <a href="../lib/RegisterCallback.htm">callback</a> indirectly triggered by the thread itself (e.g. via <a href="../lib/PostMessage.htm">SendMessage</a> or <a href="../lib/DllCall.htm">DllCall</a>). 이런 인터럽트를 피하려면, 임시로 그런 함수들을 비활성화 시키십시오.</p>
<p><a href="../lib/Critical.htm">임계</a> 쓰레드는 <a href="../lib/MsgBox.htm">MsgBox</a>나 기타 대화상자가 화면에 나타나면 인터럽트될 수 있습니다. However, unlike <a href="../lib/Thread.htm">Thread Interrupt</a>, the thread becomes critical (and therefore uninterruptible) again after the user dismisses the dialog.</p>

</body>
</html>
