<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>AutoHotkey_L New Features | AutoHotkey</title>
<meta name="description" content='Learn the new features added in the AutoHotkey_L branch of AutoHotkey development, now simply known as "AutoHotkey 1.1".' />
<meta name="ahk:equiv-v2" content="index.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body><h1>AutoHotkey_L New Features</h1>

<p>이 문서는 AutoHotkey_L 분기에 추가된 특징을 기술합니다. 이 분기는 지금은 간단하게 "AutoHotkey 1.1"라고 부릅니다.</p>
<p class="warning"><strong>주의:</strong> 이 문서는 몇 년간 방치되어 왔으며 최근의 변화로 없어지거나 더 추가된 것이 있을 수 있습니다.</p>

<h2 id="flow">제어 흐름</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="lib/Break.htm">Break <i>LoopLabel</i></a></td><td>내포 회돌이로부터 깊이에 상관없이 빠져 나옵니다.</td></tr>
<tr><td><a href="lib/Continue.htm">Continue <i>LoopLabel</i></a></td><td>회돌이를 계속합니다. 깊이에 상관이 없습니다.</td></tr>
<tr><td><a href="lib/For.htm">For <i>x</i>,<i>y</i> in <i>z</i></a></td><td>객체의 내용을 회돌이합니다.</td></tr>
<tr><td><a href="lib/Until.htm">Loop Until</a></td><td>조건이 참인 동안 회돌이 합니다. 어떤 종류의 회돌이에도 적용할 수 있습니다.</td></tr>
<tr><td><a href="lib/Try.htm">Try</a>...<a href="lib/Catch.htm">Catch</a>...<a href="lib/Finally.htm">Finally</a></td><td>구조화 된 예외 처리를 제공합니다.</td></tr>
<tr><td><a href="lib/Throw.htm">Throw</a></td><td>예외를 던집니다.</td></tr>
</table>

<h2 id="commands">명령어</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="lib/FileEncoding.htm">FileEncoding</a></td><td>기본 인코딩을 설정합니다: <a href="lib/FileRead.htm">FileRead</a>, <a href="lib/FileReadLine.htm">FileReadLine</a>, <a href="lib/LoopReadFile.htm">Loop Read</a>, <a href="lib/FileAppend.htm">FileAppend</a>, 그리고 <a href="lib/FileOpen.htm">FileOpen()</a>.<br><i>다음 참조:</i> <a href="#enc">텍스트 인코딩</a></td></tr>
<tr><td><a href="lib/Gui.htm">Gui</a></td><td>아래의 <a href="#GUI_Enhancements">GUI 개선</a>을 참조하십시오.</td></tr>
<tr><td><a href="lib/IniRead.htm">IniRead</a>/<a href="lib/IniWrite.htm">Write</a>/<a href="lib/IniDelete.htm">Delete</a></td><td>전체 섹션을 읽고, 쓰고, 지웁니다. 또는 모든 섹션 이름 목록을 열람합니다.</td></tr>
<tr><td><a href="lib/Menu.htm#MenuIcon">Menu, Icon</a></td><td>메뉴 아이템의 아이콘을 설정하거나 제거합니다.</td></tr>
<tr><td><a href="lib/Run.htm">Run</a></td><td>매개변수를 해석하도록 <a href="Compat.htm#Run">개선되었습니다</a>.</td></tr>
<tr><td><a href="lib/Send.htm#Unicode">SendInput {U+nnnn}</a></td><td>유니코드 문자를 전송합니다. 유니코드 문자는 유니코드 빌드에서 직접적으로 사용할 수 있습니다.</td></tr>
<tr><td><a href="lib/SendLevel.htm">SendLevel</a></td><td>핫키와 핫스트링이 무시하는 인위적인 키보드 그리고 마우스 이벤트를 제어합니다.</td></tr>
<tr><td><a href="lib/SetFormat.htm">SetFormat, IntegerFast, h|H</a></td><td>소문자나 대문자로 십육진 수의 형식을 설정합니다.</td></tr>
<tr><td><a href="lib/SetRegView.htm">SetRegView, RegView</a></td><td>레지스트리 명령어가 32-비트 스크립트에서 64-비트 레지스트리 뷰에 또는 그 반대로 접근하도록 해 줍니다.</td></tr>
<tr><td><a href="lib/Transform.htm#HTML">Transform, HTML</a></td><td>코드 페이지나 HTML 변환을 수행합니다.</td></tr>
<tr><td><a href="lib/WinGet.htm#ProcessPath">WinGet, ..., ProcessPath</a></td><td>주어진 창을 소유한 프로세스의 이름과 전체 경로를 열람합니다.</td></tr>
</table>

<h2 id="directives">지시어</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="lib/_If.htm">#If <i>expression</i></a></td><td><a href="lib/_IfWinActive.htm">#IfWinActive</a>와 비슷하지만, 어떤 표현식에도 사용할 수 있습니다.</td></tr>
<tr><td><a href="lib/_IfTimeout.htm">#IfTimeout</a></td><td>#If 표현식 하나를 평가하는 데 소비될 최대 시간을 설정합니다.</td></tr>
<tr><td><a href="lib/_MenuMaskKey.htm">#MenuMaskKey</a></td><td>Win 이벤트나 Alt 키뗌 이벤트를 마스크하기 위해 사용될 키를 변경합니다.</td></tr>
<tr><td><a href="lib/_Include.htm">#Include &lt;Lib&gt;</a></td><td>스크립트 파일을 함수 라이브러리 폴더로부터 포함합니다.</td></tr>
<tr><td><a href="lib/_InputLevel.htm">#InputLevel</a></td><td>핫키와 핫스트링이 무시하는 인위적인 키보드 그리고 마우스 이벤트를 제어합니다.</td></tr>
<tr><td><a href="lib/_Warn.htm">#Warn</a></td><td>선택된 조건에 대하여 경고를 켜고 끕니다. 이 에러는 개발자 에러를 가리킵니다.</td></tr>
</table>

<h2 id="functions">함수</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="lib/ComObjActive.htm">ComObj...</a> --<br>ComObjActive<br>ComObjEnwrap/Unwrap<br>ComObjParameter<br>ComObjType</td><td><br>등록된 COM 객체를 열람합니다.<br>COM 객체를 포장하거나/풉니다.<br>매개변수로 건넬 값과 유형을 포장합니다.<br>COM 객체의 유형 정보를 열람합니다.</td></tr>
<tr><td><a href="lib/ComObjArray.htm">ComObjArray</a></td><td>COM에 사용하기 위해 SAFEARRAY를 생성합니다.</td></tr>
<tr><td><a href="lib/ComObjConnect.htm">ComObjConnect</a></td><td>COM 객체의 이벤트를 주어진 접두사를 가진 함수에 연결합니다.</td></tr>
<tr><td><a href="lib/ComObjCreate.htm">ComObjCreate</a></td><td>COM 객체를 생성합니다.</td></tr>
<tr><td><a href="lib/ComObjError.htm">ComObjError</a></td><td>COM 에러의 고지를 켜고 끕니다.</td></tr>
<tr><td><a href="lib/ComObjFlags.htm">ComObjFlags</a></td><td>COM 포장 객체의 행위를 제어하는 플래그를 열람하거나 변경합니다.</td></tr>
<tr><td><a href="lib/ComObjGet.htm">ComObjGet</a></td><td>COM 콤포넌트가 제공하는 객체 주소를 돌려줍니다.</td></tr>
<tr><td><a href="lib/ComObjQuery.htm">ComObjQuery</a></td><td>COM 객체에 인터페이스 또는 서비스를 질의합니다.</td></tr>
<tr><td><a href="lib/ComObjType.htm">ComObjType</a></td><td>유형 정보를 COM 객체로부터 열람합니다.</td></tr>
<tr><td><a href="lib/ComObjValue.htm">ComObjValue</a></td><td>COM 포장 객체에 저장된 값이나 포인터를 열람합니다.</td></tr>
<tr><td><a href="lib/Throw.htm#Exception">Exception</a></td><td><a href="lib/Throw.htm">Throw</a>에 대하여 예외 객체를 생성합니다 (호출 스택에 제한적으로 접근을 제공합니다).</td></tr>
<tr><td><a href="lib/FileOpen.htm">FileOpen</a></td><td>객체-지향적 파일 입/출력을 제공합니다.</td></tr>
<tr><td><a href="lib/Func.htm#Func">Func</a></td><td>함수를 가리키는 <a href="Objects.htm#Function_References">참조</a>를 열람합니다.</td></tr>
<tr><td><a href="lib/GetKey.htm">GetKeyName/VK/SC</a></td><td>키의 가상 키 코드나 스캔 코드 또는 텍스트나 이름을 열람합니다.</td></tr>
<tr><td><a href="lib/InStr.htm">InStr</a></td><td>왼쪽이나 오른쪽으로부터 주어진 문자열이 <em>나타나는지</em> 검색합니다.</td></tr>
<tr><td><a href="lib/IsByRef.htm">IsByRef</a></td><td>ByRef 매개변수에 변수가 제공되는지 결정합니다.</td></tr>
<tr><td><a href="Objects.htm">IsObject</a></td><td>값이 객체인지 결정합니다.</td></tr>
<tr><td><a href="lib/StrPut.htm">StrPut</a> / <a href="lib/StrGet.htm">StrGet</a></td><td>문자열을 메모리에 또는 메로리로부터 복사합니다. 선택적으로 코드 페이지 사이에 변환합니다.</td></tr>
<tr><td><a href="lib/Trim.htm">Trim</a></td><td>문자열의 처음과 끝으로부터 어떤 문자들을 걷어냅니다.</td></tr>
<tr><td><a href="misc/RegExCallout.htm">RegEx (?C<i>Num</i>:<i>Func</i>)</a></td><td>regex 패턴을 평가하는 동안 함수를 호출합니다.</td></tr>
<tr><td><a href="#Function_Libraries">함수 라이브러리</a></td><td>새로운 "지역 라이브러리" 그리고 <code>#Include &lt;LibName&gt;</code>.</td></tr>
<tr><td><a href="Functions.htm#Variadic">가변 함수</a></td><td>함수는 배열을 통하여 가변 개수의 매개변수를 받을 수 있습니다.</td></tr>
<tr><td><a href="#Static">정적 초기화자</a></td><td>정적 변수는 이제 어떤 표현식으로도 초기화할 수 있습니다.</td></tr>
</table>

<h2 id="objects">객체</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="Objects.htm">일반</a></td><td>일반적인 객체의 사용법과 행위.</td></tr>
<tr><td><a href="Objects.htm#Arrays">객체</a></td><td>다른 기능으로 확장할 수 있는 연관 배열.</td></tr>
<tr><td><a href="lib/Enumerator.htm">열거자</a></td><td>집단 안의 항목을 열거합니다.</td></tr>
<tr><td><a href="lib/File.htm">파일</a></td><td>파일에 접근할 수 있도록 인터페이스를 제공합니다. <a href="lib/FileOpen.htm">FileOpen()</a>은 이 유형의 객체를 돌려줍니다.</td></tr>
<tr><td><a href="lib/Func.htm">Func</a></td><td>스크립트가 호출할 수 있는 사용자 정의 함수 또는 내장 함수를 가리킵니다.</td></tr>
<tr><td>ComObject</td><td>위의 ComObj 함수를 참조하십시오.</td></tr>
</table>

<h2 id="vars">변수</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td>A_Is64bitOS</td><td>OS가 64-비트이면 1 (true)이, 32-비트이면 0 (false)이 담깁니다.</td></tr>
<tr><td>A_IsUnicode</td><td>유니코드 빌드에서 이변수는 1 (<i>true</i>)이 담깁니다. ANSI 빌드는 정의되어 있지 않습니다. 그래서 그 효과상 거짓(<i>false</i>)입니다.</td></tr>
<tr><td>A_FileEncoding</td><td>다양한 명령어에 대하여 기본 인코딩을 담고 있습니다; <a href="lib/FileEncoding.htm">FileEncoding</a>을 참조하십시오.</td></tr>
<tr><td>A_OSVersion</td><td>Windows 7과 Windows 8을 지원합니다; <a href="Variables.htm#OSVersion">A_OSVersion</a>을 참조하십시오.</td></tr>
<tr><td>A_PriorKey</td><td>가장 최근에 키-누름이나 키-뗌 바로 전에 마지막으로 눌려진 키의 이름 ... <a href="Variables.htm#PriorKey">(자세한 것은 여기를 참조)</a></td></tr>
<tr><td>A_PtrSize</td><td>바이트 단위로 포인터의 크기가 담깁니다. 이것은 4 (32-bit) 또는 8 (64-bit)입니다.</td></tr>
<tr><td>A_RegView</td><td><a href="lib/SetRegView.htm">SetRegView</a>가 설정한 현재 레지스트리 뷰.</td></tr>
<tr><td>A_ScriptHwnd</td><td>스크립트의 숨은 메인 창의 유일한 ID (HWND/핸들).</td></tr>
</table>

<h2 id="types">데이터유형</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="lib/DllCall.htm#ptr">Ptr</a></td><td>32-비트 빌드에서 <i>Int</i>와 동등하고 64-비트 빌드에서는 <i>Int64</i>과 동등합니다. <a href="lib/DllCall.htm">DllCall()</a>, <a href="lib/NumPut.htm">NumPut()</a> 그리고 <a href="lib/NumGet.htm">NumGet()</a>이 지원합니다.</td></tr>
<tr><td><a href="lib/DllCall.htm#astr">AStr</a>, <a href="lib/DllCall.htm#astr">WStr</a></td><td><a href="lib/DllCall.htm">DllCall()</a>만 지원합니다; <a href="Compat.htm">스크립트 호환성</a> 참조.</td></tr>
</table>

<h2 id="unicode">유니코드</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="Compat.htm">호환성</a></td><td>DllCall() 등등에서 유니코드를 다루는 법</td></tr>
<tr><td><a href="Scripts.htm#cp">스크립트 파일</a></td><td>스크립트 파일에 유니코드 사용하기.</td></tr>
<tr><td><a href="lib/Send.htm#Unicode">SendInput</a></td><td>SendInput에 유니코드 사용하기.</td></tr>
</table>

<h2 id="other">기타</h2>
<table class="info">
<tr>
  <th>Feature</th>
  <th abbr="설명">설명</th>
</tr>
<tr><td><a href="misc/WinTitle.htm#ahk_exe">ahk_exe</a></td><td>창을 소유하고 있는 프로세스 (EXE 파일)의 경로나 이름으로 창을 식별할 수 있습니다.</td></tr>
<tr><td><a href="Scripts.htm#idebug">디버깅</a></td><td>상호대화 디버깅 특징 (줄 단위로 실행 등등.).</td></tr>
<tr><td><a href="#Error_Handling">에러 처리</a></td><td>Try/catch/throw 그리고 A_LastError의 유용성 증가.</td></tr>
<tr><td><a href="#GUI_Enhancements">GUI 개선</a></td><td>Gui 관련 명령어를 개선.</td></tr>
<tr><td><a href="#icons">아이콘 지원</a></td><td>자원 식별자 지원 그리고 다양한 아이콘 크기 지원 개선.</td></tr>
<tr><td><a href="Compat.htm">기타 변경</a></td><td>스크립트의 호환성에 영향을 미치는 변경들.</td></tr>
<tr><td><a href="AHKL_ChangeLog.htm">버전 이력</a></td><td>AutoHotkey_L 개정판 이력.</td></tr>

</table>


<h2 id="Error_Handling">에러 처리</h2>
<p>에러 처리를 위해 많은 명령어가 ErrorLevel 대신에 <a href="lib/Try.htm">try</a>/<a href="lib/Catch.htm">catch</a>의 사용을 지원합니다. 예를 들어:</p>
<pre class="NoIndent">try
{
    FileCopy, file1.txt, C:\folder
    FileDelete, C:\folder\old.txt
}
catch
    MsgBox 에러가 일어났습니다!</pre>
<p>추가로, 다음 명령어는 이제 <a href="Variables.htm#LastError">A_LastError</a>를 설정해 디버깅을 돕습니다: FileAppend, FileRead, FileReadLine, FileDelete, FileCopy, FileMove, FileGetAttrib/Time/Size/Version, FileSetAttrib/Time, FileCreateDir, RegRead, RegWrite, RegDelete.</p>

<h2 id="Function_Libraries">함수 라이브러리</h2>
<p><code>%A_MyDocuments%\AutoHotkey\Lib</code>의 사용자 라이브러리와 AutoHotkey 디렉토리의 표준 라이브러리 말고도, <code>%A_ScriptDir%\Lib</code>에 위치하는 "지역 라이브러리"로부터 함수를 자동 삽입할 수 있습니다. 더 자세한 정보는 <a href="Functions.htm#lib">함수 라이브러리</a>를 참조하십시오.</p>
<p><a href="lib/_Include.htm">#Include &lt;LibName&gt;</a>는 함수 라이브러리 중 하나에 위치한 라이브러리 파일을 명시적으로 포함합니다.</p>

<h2 id="GUI_Enhancements">GUI 개선</h2>
<p><a href="lib/Gui.htm">Gui</a> 명령와 기타 관련된 항목에 수 많은 개선이 이루어졌습니다:</p>
<ul>
  <li>GUI를 가리킬 때 1부터 99 사이의 숫자 대신에 <a href="lib/Gui.htm#MultiWin">이름이나 HWND</a>를 사용할 수 있습니다.</li>
  <li><a href="lib/Gui.htm#New">Gui, New</a>는 익명의 GUI를 새로 만듭니다.</li>
  <li>얼마든지 익명 또는 실명으로 GUI를 생성할 수 있습니다.</li>
  <li>새로운 GUI 옵션: <a href="lib/Gui.htm#GuiHwndOutputVar">+Hwnd<em>OutputVar</em></a>, <a href="lib/Gui.htm#Parent">+Parent<em>GUI</em></a></li>
  <li>어떤 창이든 GUI의 소유자가 될 수 있습니다: <a href="lib/Gui.htm#Owner">+Owner<em>%HWND%</em></a>.</li>
  <li><a href="lib/Gui.htm#fontq">Gui, Font</a>는 텍스트의 안티-앨리어싱을 제어할 수 있습니다.</li>
  <li>인터넷 익스플로러 같은 <a href="lib/GuiControls.htm#ActiveX">ActiveX 콘트롤</a>을 지원합니다.</li>
  <li><a href="lib/GuiControlGet.htm#Name">GuiControlGet, <em>OutputVar</em>, Name</a> 은 GUI 콘트를에 연관된 변수의 이름을 얻습니다.</li>
  <li><a href="lib/Gui.htm#Menu">Gui 메뉴</a>에 사용될 때 <kbd>Ctrl</kbd>+<kbd>O</kbd>와 같은 키보드 가속키를 자동으로 지원합니다.</li>
  <li><a href="lib/Gui.htm#fontq">글꼴 품질</a>은 Font 부-명령어로 제어합니다.</li>
</ul>

<h2 id="Static">정적 변수</h2>
<p>정적 변수는 이제 어떤 표현식으로도 초기화할 수 있습니다. 예를 들어:</p>
<pre>Sleep 500
MsgBox % Time() "ms since the script started."
Time() {
    static Tick := A_TickCount
    return A_TickCount - Tick
}</pre>

<h2 id="enc">텍스트 인코딩</h2>
<p><a href="lib/FileRead.htm">FileRead</a>, <a href="lib/FileReadLine.htm">FileReadLine</a>, <a href="lib/LoopReadFile.htm">Loop Read</a> 그리고 <a href="lib/FileAppend.htm">FileAppend</a>는 윈도우즈가 지원하는 텍스트 인코딩을 대부분 지원합니다. 단, 시스템의 기본 ANSI 코드 페이지는 지원하지 않습니다. <a href="lib/FileEncoding.htm">FileEncoding</a>을 사용하면 기본 인코딩을 설정할 수 있습니다. 다음과 같이 FileRead와 FileAppend를 오버라이드 합니다:</p>
<pre class="Syntax">
<span class="func">FileRead</span>, OutputVar, *P<i>nnn</i> Filename
<span class="func">FileAppend</span> <span class="optional">, Text, Filename, Encoding</span>
</pre>
<p><i>nnn</i>는 숫치 <a href="https://learn.microsoft.com/windows/desktop/Intl/code-page-identifiers">코드 페이지 식별자</a>가 되어야 하며, <i>Encoding</i>은 <a href="lib/FileEncoding.htm">FileEncoding</a>과 같은 형식을 따라야 합니다.</p>
<p><b>다음도 참조하십시오:</b> <a href="Compat.htm#FileRead">스크립트 호환성</a></p>

<h2 id="Variadic">가변 함수 그리고 가변 함수-호출</h2>
<p><a href="Functions.htm#Variadic">가변 함수</a>는 배열을 통하여 가변 개수의 인자를 받을 수 있습니다. 반면에, <a href="Functions.htm#VariadicCall">가변 함수-호출</a>을 사용하면 가변 개수의 매개변수를 함수에 건넬 수 있습니다.</p>


<h2 id="icons">아이콘 지원 개선</h2>

<h3 id="Unusual_Sizes">비정상적인 크기</h3>
<p>크기에 상관없이 운영체제가 지원하는 아이콘 자원이면 얼마든지 실행파일로부터 추출할 수 있습니다. 아이콘 그룹에 여러 크기의 아이콘 자원이 존재하면, 가장 적절한 크기가 사용됩니다. 17 이전 버전에서는 임의의 아이콘 자원을 운영체제가 선택해 주었고, 시스템 크기의 아이콘으로 확대되었다가, 다시 요청한 크기로 변경되었습니다.</p>

<h3 id="Resource_Identifiers">자원 식별자</h3>
<p>음수의 아이콘 번호를 사용하면 실행 파일 안에서 그룹 아이콘을 식별할 수 있습니다. 예를 들어, 다음은 트레이 아이콘을 ahk 파일이 사용할 기본 아이콘으로 설정합니다:</p>
<pre>Menu, Tray, Icon, %A_AhkPath%, -160</pre>

</body></html>
