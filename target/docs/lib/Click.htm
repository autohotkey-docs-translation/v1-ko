<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Click - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Click command clicks a mouse button at the specified coordinates. 또 마우스 버튼을 누르고 있을 수 있으며 휠을 돌릴 수 있습니다. 마우스를 이동할 수도 있습니다." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Click <span class="ver">[v1.0.43+]</span></h1>

<p>지정된 좌표에 마우스 버튼을 클릭합니다. 또 마우스 버튼을 누르고 있을 수 있으며 휠을 돌릴 수 있습니다. 마우스를 이동할 수도 있습니다.</p>
<pre class="Syntax"><span class="func">Click</span> <span class="optional">, Options</span></pre>

<h2 id="Parameters">매개변수</h2>
<dl>
  <dt>Options</dt>
  <dd>
    <p>Specify zero or more of the following components: <var>Coords</var>, <var>WhichButton</var>, <var>ClickCount</var>, <var>DownOrUp</var>, and/or <var>Relative</var>. Separate each component from the next with at least one space, tab, and/or comma. The components can appear in any order except <var>ClickCount</var>, which must occur somewhere to the right of <var>Coords</var>, if present.</p>
    <p><strong>Coords:</strong> The X and Y coordinates to which the mouse cursor is moved prior to clicking. For example, <code>Click, 100 200</code> clicks the left mouse button at a specific position. 좌표는 활성 창에 상대적입니다. 단, <a href="CoordMode.htm">CoordMode</a>를 사용하여 좌표 체계를 바꾼 경우는 예외입니다. 생략하면, 커서의 현재 위치가 사용됩니다.</p>
    <p><strong>WhichButton:</strong> Left (기본값), Right, Middle (또는 각각 그냥 앞 머리 글자 하나); 또는 네 번째 다섯 번째 마우스 버튼 (X1 또는 X2). For example, <code>Click, Right</code> clicks the right mouse button at the mouse cursor's current position. <a href="MouseClick.htm">MouseClick</a>과 다르게, 왼버튼과 우버튼은 모든 시스템에 걸쳐 행위에 일관성이 있습니다. 사용자가 시스템 제어판을 통하여 버튼을 서로 바꾸었다고 할지라도 말입니다.</p>
    <p><var>WhichButton</var> can also be WheelUp or WU to turn the wheel upward (away from you), or WheelDown or WD to turn the wheel downward (toward you). <span class="ver">[v1.0.48+]</span>: WheelLeft (WL) 또는 WheelRight (WR)을 지정할 수 있습니다 (그러나 윈도우즈 비스타 이전의 구형 버전에서는 아무 효과도 없습니다). <var>ClickCount</var>에 대하여 돌릴 휠의 눈금을 지정합니다. However, some applications do not obey a <var>ClickCount</var> value higher than 1 for the mouse wheel. For them, use the Click command multiple times by means such as <a href="Loop.htm">Loop</a>.</p>
    <p><strong>ClickCount:</strong> 마우스를 클릭할 횟수. For example, <code>Click, 2</code> performs a double-click at the mouse cursor's current position. 생략하면, 버튼은 한 번 클릭됩니다. If <var>Coords</var> is specified, <var>ClickCount</var> must appear after it. 영 (0)을 지정하면 마우스를 클릭하지 않고 이동할 수 있습니다; 예를 들어 <code>Click, 100 200 0</code>.</p>
    <p><strong>DownOrUp:</strong> This component is normally omitted, in which case each click consists of a down-event followed by an up-event. Otherwise, specify the word Down (or the letter D) to press the mouse button down without releasing it. 나중에, Up (또는 U)를 사용하면 마우스 버튼을 뗄 수 있습니다. For example, <code>Click, Down</code> presses down the left mouse button and holds it.</p>
    <p><strong>Relative:</strong> 단어 Rel 또는 Relative는 지정된 X와 Y 좌표를 현재 마우스 위치로부터 상대 거리로 취급합니다. 다른 말로, 커서는 그의 현재 위치로부터 X 픽셀만큼 오른쪽으로 (음의 정수이면 왼쪽으로) 그리고 Y 픽셀만큼 아래로 (음의 정수이면 위로) 이동합니다.</p>
  </dd>
</dl>

<h2 id="Remarks">논평</h2>
<p>일반적으로 <a href="MouseClick.htm">MouseClick</a>보다 Click을 선호합니다. 왜냐하면 시스템의 제어판을 통하여 사용자가 좌우 마우스 버튼을 바꾸더라도 자동으로 보상해 주기 때문입니다.</p>
<p>The Click command uses the sending method set by <a href="SendMode.htm">SendMode</a>. To override this mode for a particular click, use a specific Send command in combination with <a href="Send.htm#Click">{Click}</a>, as in this example: <code>SendEvent {Click 100 200}</code>.</p>
<p>To perform a shift-click or control-click, <a href="Send.htm#Click">clicking via Send</a> is generally easiest. 예를 들어:</p>
<pre>Send +{Click 100 200}  <em>; Shift+LeftClick</em>
Send ^{Click 100 200 Right}  <em>; Control+RightClick</em></pre>
<p>Unlike <a href="Send.htm">Send</a>, the Click command does not automatically release the modifier keys (Ctrl, Alt, Shift, and Win). 예를 들어, <kbd>Ctrl</kbd>가 현재 눌려 있으면, <code>Click</code>은 control-click을 생산하지만 <code>Send {Click}</code>는 보통의 클릭을 생산합니다.</p>
<p><a href="SendMode.htm">SendPlay 모드</a>는 다른 모드들 보다 더 광범위한 게임에 성공적으로 마우스 이벤트를 만들 수 있습니다. 게다가, 어떤 어플리케이션과 게임은 너무 빨리 움직이면 추적에 어려움이 있을 수 있습니다. 그런 경우 <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>를 사용하면 속도를 줄일 수 있습니다 (그러나 <a href="SendMode.htm">SendEvent 모드</a> 전용입니다).</p>
<p><a href="BlockInput.htm">BlockInput</a> 명령어를 사용하면 사용자의 물리적인 마우스 활동 때문에 마우스 명령어로 생산되는 흉내낸 마우스 이벤트들이 어질러지는 것을 막을 수 있습니다. 그렇지만, 이는 일반적으로 <a href="SendMode.htm">SendInput</a> 모드와 <a href="SendMode.htm">SendPlay</a> 모드에 필요하지 않습니다. 왜냐하면 자동으로 사용자의 물리적 마우스 움직임을 뒤로 지연하기 때문입니다.</p>
<p>마우스를 클릭해서 누르고 뗄 때마다 뒤에 자동으로 지연시간이 있습니다 (<a href="SendMode.htm">SendInput 모드</a>와 마우스 휠 돌리기는 제외합니다). <a href="SetMouseDelay.htm">SetMouseDelay</a>를 사용하면 지연시간을 변경할 수 있습니다.</p>
<h2 id="Related">관련 항목</h2>
<p><a href="Send.htm#Click">Send {Click}</a>, <a href="SendMode.htm">SendMode</a>, <a href="CoordMode.htm">CoordMode</a>, <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="MouseClick.htm">MouseClick</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="BlockInput.htm">BlockInput</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Clicks the left mouse button at the mouse cursor's current position.</p>
<pre>Click</pre>
</div>

<div class="ex" id="ExCoord">
<p><a class="ex_number" href="#ExCoord"></a> Clicks the left mouse button at a specific position.</p>
<pre>Click, 100 200</pre>
</div>

<div class="ex" id="ExCoordMove">
<p><a class="ex_number" href="#ExCoordMove"></a> Moves the mouse cursor to a specific position without clicking.</p>
<pre>Click, 100 200 0</pre>
</div>

<div class="ex" id="ExCoordRight">
<p><a class="ex_number" href="#ExCoordRight"></a> Clicks the right mouse button at a specific position.</p>
<pre>Click, 100 200 Right</pre>
</div>

<div class="ex" id="ExDouble">
<p><a class="ex_number" href="#ExDouble"></a> Performs a double-click at the mouse cursor's current position.</p>
<pre>Click, 2</pre>
</div>

<div class="ex" id="ExDown">
<p><a class="ex_number" href="#ExDown"></a> 왼버튼을 누르고 그대로 유지합니다.</p>
<pre>Click, Down</pre>
</div>

<div class="ex" id="ExUp">
<p><a class="ex_number" href="#ExUp"></a> 우버튼을 뗍니다.</p>
<pre>Click, Up Right</pre>
</div>

</body>
</html>
