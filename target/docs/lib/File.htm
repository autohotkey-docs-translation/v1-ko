<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>File Object - Methods &amp; Properties | AutoHotkey</title>
<meta name="description" content="The file object provides an interface for a file to perform actions, such as reading or writing data, or to retrieve or set values, such as length." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>파일 객체 <span class="ver">[AHK_L 42+]</span></h1>

<p>파일 입/출력을 위한 인터페이스를 제공합니다. <a href="../commands/FileOpen.htm">FileOpen()</a>은 이 유형의 객체를 돌려줍니다.</p>

<h2 id="Members">Object Members</h2>
<p>Properties:</p>
<ul>
  <li><a href="#Seek">Position / Pos</a>: Retrieves or sets the position of the file pointer. Equivalent to <code>Pos := File.Tell()</code> or <code>File.Seek(Distance)</code>.</li>
  <li><a href="#Length">Length</a>: 파일의 크기를 열람하거나 설정합니다.</li>
  <li><a href="#AtEOF">AtEOF</a>: Retrieves a non-zero value if the file pointer has reached the end of the file.</li>
  <li><a href="#Encoding">Encoding</a>: 이 파일 객체가 사용하는 텍스트 인코딩을 열람하거나 설정합니다.</li>
  <li><a href="#Handle">__Handle</a>: Retrieves a system file handle, intended for use with DllCall().</li>
</ul>
<p>메쏘드:</p>
<ul>
  <li><a href="#Read">Read</a>: 문자열을 파일로부터 읽고 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#Write">Write</a>: 문자열을 파일에 쓰고 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#ReadLine">ReadLine</a>: 파일로부터 텍스트 한 줄을 읽고 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#WriteLine">WriteLine</a>: 문자열을 씁니다. 파일을 여는 데 사용된 플래그에 따라 다음에 <code>`n</code> 또는 <code>`r`n</code>이 따라옵니다. 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#ReadNum">Read<em>NumType</em></a>: 지정한 바이트 개수만큼 파일로부터 읽고 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#WriteNum">Write<em>NumType</em></a>: 지정된 바이트 개수 만큼 쓰고 파일 포인터를 앞으로 이동시킵니다.</li>
  <li><a href="#RawRead">RawRead</a>: Reads raw binary data from the file into memory and advances the file pointer.</li>
  <li><a href="#RawWrite">RawWrite</a>: Writes raw binary data to the file and advances the file pointer.</li>
  <li><a href="#Seek">Seek</a>: 파일 포인터를 이동시킵니다. If the second parameter is omitted, it is equivalent to <code>File.Pos := Distance</code>.</li>
  <li><a href="#Tell">Tell</a>: Returns the position of the file pointer. Equivalent to <code>Pos := File.Pos</code>.</li>
  <li><a href="#Close">Close</a>: 파일을 닫습니다. 캐쉬에 있는 데이터를 디스크로 비웁니다. 공유 잠금을 해제합니다.</li>
</ul>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>문자열을 파일로부터 읽고 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">String := File.<span class="func">Read</span>(<span class="optional">Characters</span>)</pre>
<dl>
  <dt>Characters</dt>
  <dd>읽을 문자의 최대 개수. 생략하면, 파일 나머지를 읽어서 하나의 문자열로 돌려줍니다. 콘솔 버퍼나 파이프 같이 포인터를 앞뒤로 이동시킬 수 없는 핸들로부터 파일 객체가 생성되었을 경우, 이 매개변수를 생략하면 메쏘드가 실패하거나 또는 현재 사용이 가능한 데이터만 돌려줄 가능성이 있습니다.</dd>
</dl>
<p><strong>Returns</strong> a string.</p>
</div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>문자열을 파일에 쓰고 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">File.<span class="func">Write</span>(String)</pre>
<dl>
  <dt>String</dt>
  <dd>A string to write.</dd>
</dl>
<p><strong>Returns</strong> the number of bytes (not characters) that were written.</p>
</div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>파일로부터 텍스트 한 줄을 읽고 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">TextLine := File.<span class="func">ReadLine</span>()</pre>
<p><strong>Returns</strong> a line of text. 여기에는 파일과 그 파일을 여는 데 사용된 EOL 플래그에 따라 <code>`n</code>, <code>`r`n</code> 또는 <code>`r</code>이 포함될 수 있습니다.</p>
<p>65,534 문자 길이 까지 줄을 읽을 수 있습니다. If the length of a line exceeds this, the remainder of the line is returned by subsequent calls to this method.</p></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>문자열을 씁니다. 파일을 여는 데 사용된 플래그에 따라 다음에 <code>`n</code> 또는 <code>`r`n</code>이 따라옵니다. 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">File.<span class="func">WriteLine</span>(<span class="optional">String</span>)</pre>
<dl>
  <dt>String</dt>
  <dd>An optional string to write.</dd>
</dl>
<p><strong>Returns</strong> the number of bytes (not characters) that were written.</p>
</div>

<div class="methodShort" id="ReadNum"><h2>Read<i>NumType</i></h2>
<p>지정한 바이트 개수만큼 파일로부터 읽고 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">Num := File.Read<i>NumType</i>()</pre>
<p><em>NumType</em> is either UInt, Int, Int64, Short, UShort, Char, UChar, Double, or Float. These type names have the same meanings as with <a href="../commands/DllCall.htm#types">DllCall()</a>.</p>
<p><strong>Returns</strong> a number if successful, otherwise an empty string.</p>
<p>If a Try statement is active and no bytes were read, an exception is thrown. However, no exception is thrown if at least one byte was read, even if the size of the given <i>NumType</i> is greater than the number of bytes read. Instead, the missing bytes are assumed to be zero.</p></div>

<div class="methodShort" id="WriteNum"><h2>Write<i>NumType</i></h2>
<p>지정된 바이트 개수 만큼 쓰고 파일 포인터를 앞으로 이동시킵니다.</p>
<pre class="Syntax">File.Write<i>NumType</i>(Num)</pre>
<dl>
  <dt>Num</dt>
  <dd>A number to write.</dd>
</dl>
<p><em>NumType</em> is either UInt, Int, Int64, Short, UShort, Char, UChar, Double, or Float. These type names have the same meanings as with <a href="../commands/DllCall.htm#types">DllCall()</a>.</p>
<p><strong>Returns</strong> the number of bytes that were written. 예를 들면 WriteUInt는 성공하면 4를 돌려줍니다.</p>
</div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>Reads raw binary data from the file into memory and advances the file pointer.</p>
<pre class="Syntax">File.<span class="func">RawRead</span>(VarOrAddress, Bytes)</pre>
<dl>
  <dt>VarOrAddress</dt>
  <dd>데이터가 복사될 변수 또는 메모리 주소. 사용법은 <a href="../commands/NumGet.htm">NumGet()</a>과 비슷합니다. 변수가 지정되어 있으면, 필요한 경우 자동으로 확대됩니다.</dd>
  <dt>Bytes</dt>
  <dd>읽을 바이트의 최대 개수.</dd>
</dl>
<p><strong>Returns</strong> the number of bytes that were read.</p>
<p>If a Try statement is active and <em>Bytes</em> is non-zero but no bytes were read, an exception is thrown. <a href="#AtEOF">AtEOF</a> can be used to avoid this, if needed.</p></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>Writes raw binary data to the file and advances the file pointer.</p>
<pre class="Syntax">File.<span class="func">RawWrite</span>(VarOrAddress, Bytes)</pre>
<dl>
  <dt>VarOrAddress</dt>
  <dd>데이터를 담고 있는 변수 또는 메모리의 데이터 주소. 사용법은 <a href="../commands/NumPut.htm">NumPut()</a>과 비슷합니다.</dd>
  <dt>Bytes</dt>
  <dd>쓸 바이트 개수.</dd>
</dl>
<p><strong>Returns</strong> the number of bytes that were written.</p>
</div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>파일 포인터를 이동시킵니다.</p>
<pre class="Syntax">
File.<span class="func">Seek</span>(Distance <span class="optional">, Origin := 0</span>)
File.Position := Distance
File.Pos := Distance
</pre>
<dl>
  <dt>Distance</dt>
  <dd>바이트 단위로 이동할 거리. 값이 낮을 수록 파일의 앞 쪽에 가깝습니다.</dd>
  <dt>Origin</dt>
  <dd><p>파일 포인터의 이동 시작 지점. 반드시 다음 하나가 되어야 합니다:</p>
    <ul>
      <li>0 (SEEK_SET): 파일의 처음. <i>Distance</i>는 0이상이어야 합니다.</li>
      <li>1 (SEEK_CUR): 파일 포인터의 현재 위치.</li>
      <li>2 (SEEK_END): 파일 끝. <i>Distance</i>는 보통 음의 정수입니다.</li>
    </ul>
    <p>생략하면, <em>Distance</em>가 음의 정수일 때 <i>Origin</i>는 SEEK_END이 기본값이고 그렇지 않으면 SEEK_SET이 기본값입니다.</p></dd>
</dl>
<p><strong>Returns</strong> a non-zero value if successful, otherwise zero.</p>
</div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<p>Returns the current position of the file pointer, where 0 is the beginning of the file.</p>
<pre class="Syntax">
Pos := File.<span class="func">Tell</span>()
Pos := File.Position
Pos := File.Pos
</pre>
</div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>파일의 크기를 열람하거나 설정합니다.</p>
<pre class="Syntax">FileSize := File.Length</pre>
<pre class="Syntax">File.Length := NewSize</pre>
<p><em>FileSize</em> and <em>NewSize</em> is the size of the file, in bytes.</p>
<p>이 특성은 실제 파일에만 사용해야 합니다. 파일 객체가 파이프를 가리키는 핸들로부터 생성되었다면, 파이프의 내부 버퍼에서 현재 사용가능한 纛?데이터를 돌려줄 수 있지만, 이 행위는 보증하지 않습니다.</p></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
  <p>Retrieves a non-zero value if the file pointer has reached the end of the file, otherwise zero.</p>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
  <p>이 특성은 실제 파일에만 사용해야 합니다. 콘솔 버퍼나 파이프 같은 포인터-이동 없는 장치를 가리키는 핸들로부터 파일 객체가 생성되었다면, 반환 값은 의미가 없습니다. 그런 장치는 논리적으로 "파일 끝"이 없기 때문입니다.</p></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>파일을 닫습니다. 캐쉬에 있는 데이터를 디스크로 비웁니다. 공유 잠금을 해제합니다.</p>
<pre class="Syntax">File.<span class="func">Close</span>()</pre>
<p>객체가 해제되면 자동으로 파일이 닫히지만, 가능하면 빨리 닫기를 권장합니다.</p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>이 파일 객체가 사용하는 텍스트 인코딩을 열람하거나 설정합니다.</p>
<pre class="Syntax">RetrievedEncoding := File.Encoding</pre>
<pre class="Syntax">File.Encoding := NewEncoding</pre>
  <p><em>RetrievedEncoding</em> and <em>NewEncoding</em> is a numeric code page identifier (see <a href="http://msdn.microsoft.com/ko-kr/library/dd317756.aspx">MSDN</a>) or one of the following strings:</p>
  <ul>
	<li><code>UTF-8</code>: Unicode UTF-8, CP65001과 동등.</li>
	<li><code>UTF-16</code>: Unicode UTF-16 작은값 종료형. CP1200과 동등.</li>
	<li><code>CP<i>nnn</i></code>: 숫치 식별자 <i>nnn</i>이 있는 코드 페이지.</li>
  </ul>
  <p><em>RetrievedEncoding</em> is never a value with the <code>-RAW</code> suffix, regardless of how the file was opened or whether it contains a byte order mark (BOM). <em>NewEncoding</em> 설정만으로 BOM이 붙거나 제거되지 않습니다. BOM은 보통 처음 파일이 생성될 때 씌여집니다.</p>
  <p><span class="ver">[v1.1.15.04+]</span>: <em>인코딩</em>을 <code>UTF-8-RAW</code>이나 <code>UTF-16-RAW</code>으로 설정할 수 있습니다. 그러나 <code>-RAW</code> 접미사는 무시됩니다. 이전 버전에서, <code>UTF-8-RAW</code>와 <code>UTF-16-RAW</code>은 무효한 8-비트 인코딩처럼 행위하므로, 모든 비-ASCII 문자들이 폐기됩니다. 이것은 오직 <code>File.Encoding</code>에만 적용되지, <a href="../commands/FileOpen.htm">FileOpen()</a>에는 적용되지 않습니다.</p>
</div>

<div class="methodShort" id="Handle"><h2>__Handle</h2>
  <p>Returns a system file handle, intended for use with DllCall(). <a href="http://msdn.microsoft.com/ko-kr/library/aa363858.aspx">CreateFile</a>을 참조하십시오.</p>
<pre class="Syntax">File.__Handle</pre>
<p>파일 객체는 내부적으로 읽기와 쓰기를 버퍼 처리합니다. 데이터가 객체의 내부 버퍼에 씌여졌다면, 핸들을 반환하기 전에 디스크에 써야 합니다. 버퍼에 파일로부터 읽은 데이터가 들어 있다면, 그 데이터는 폐기되고 <code>File.Pos</code>가 가리키는 실제 파일 포인터는 논리 위치로 재설정됩니다.</p></div>

</body>
</html>
