<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>TreeView (GUI) - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The TreeView control displays a hierarchy of items by indenting child items beneath their parents. This page contains the functions to modify it." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>

<body>
<h1>TreeView <span class="ver">[v1.0.44+]</span></h1>

<h2 id="toc">목차</h2>
<ul>
  <li><a href="#Intro">소개와 간단한 예제</a></li>
  <li><a href="#Options">Options and Styles for the Options Parameter</a></li>
  <li><a href="#BuiltIn">TreeViews용 내장 함수</a></li>
  <li><a href="#notify">G-Label 고지</a></li>
  <li><a href="#Remarks">논평</a></li>
  <li><a href="#Examples">예제</a></li>
</ul>

<h2 id="Intro">소개와 간단한 예제</h2>
<p>Tree-View는 계통적 항목들을 부모 아래의 자손들은 한 단계 들여 넣어 보여줍니다. 가장 흔한 예는 익스플로러의 드라이브와 폴더 트리입니다.</p>
<p>A TreeView usually looks like this:</p>
<img src="../static/ctrl_treeview.png" alt="TreeView" />
<p>TreeView를 생성하는 구문은 다음과 같습니다:</p>
<pre class="Syntax" id="GuiAdd"><span class="func">Gui</span>, Add, TreeView, Options</pre>
<p>다음 스크립트는 간단한 계통적 항목들을 생성하고 보여줍니다:</p>
<pre>Gui, Add, TreeView
<span class="red">P1</span> := <a href="#TV_Add">TV_Add</a>("First parent")
P1C1 := TV_Add("Parent 1's first child", <span class="red">P1</span>)  <em>; P1을 이 항목의 부모로 지정합니다.</em>
P2 := TV_Add("Second parent")
P2C1 := TV_Add("Parent 2's first child", P2)
P2C2 := TV_Add("Parent 2's second child", P2)
P2C2C1 := TV_Add("Child 2's first child", P2C2)

Gui, Show  <em>; 창과 그의 TreeView를 보여줍니다.</em>
return

GuiClose:  <em>; 사용자가 TreeView의 GUI 창을 닫으면 스크립트를 종료합니다.</em>
ExitApp</pre>

<h2 id="Options">Options and Styles for the Options Parameter</h2>
<p id="AltSubmit"><strong>AltSubmit:</strong> 스크립트에 정상보다 더 많은 유형의 TreeView 이벤트에 대하여 고지합니다. 다른 말로 하면, g-라벨이 더 자주 기동됩니다. 자세한 것은 <a href="#notify">TreeView Notifications</a>을 참조하십시오.</p>
<p><strong>Background:</strong> 단어 Background 다음에 바로 색 이름 (<a href="Progress.htm#colors">컬러 차트</a> 참조) 또는 RGB 값을 지정하십시오 (0x 접두사는 선택적입니다). 예제: <code>BackgroundSilver</code>, <code>BackgroundFFDD99</code>. 이 옵션이 존재하지 않으면, TreeView는 처음에 기본값이. <a href="Gui.htm#Color">Gui Color</a>의 마지막 매개변수로 설정된 배경색입니다 (또는 없으면, 시스템의 기본 배경 색입니다). <code>BackgroundDefault</code>를 지정하면 시스템의 기본 배경색에 적용됩니다 (보통 흰색). 예를 들어, <code>GuiControl, +BackgroundDefault, MyTreeView</code>를 통하여 TreeView를 기본값으로 복구할 수 있습니다.</p>
<p><strong>Buttons</strong>: <code>-Buttons</code> (마이너스 버튼)을 지정하면 플러스나 마이너스 사인이 자손이 있는 각 항목의 왼쪽에 나타나는 것을 막을 수 있습니다.</p>
<p><strong>C</strong>: 텍스트 컬러. 기호 C 다음에 바로 컬러 이름 (<a href="Progress.htm#colors">컬러 차트</a> 참조) 또는 RGB 값을 지정하십시오 (0x 접두사는 선택적입니다). 예제: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p id="Checked"><strong>Checked:</strong> 각 항목의 왼쪽에 체크박스를 제공합니다. 항목을 <a href="#TV_Add">추가</a>할 때, 단어 <em>Check</em>를 그의 옵션에 지정하면 박스를 체크한 상태로 시작할 수 있습니다. 사용자는 체크박스크를 클릭하거나 스페이스를 바를 눌러 항목을 체크하거나 해제할 수 있습니다. 어느 항목이 현재 TreeView에 체크되어 있는지 알아 보려면, <a href="#TV_GetNext">TV_GetNext()</a> 또는 <a href="#TV_Get">TV_Get()</a>을 호출하십시오.</p>
<p><strong>HScroll</strong>: <code>-HScroll</code> (마이너스 HScroll)을 지정하면 수평 스크롤을 불능으로 만들 수 있습니다 (게다가, 콘트롤은 수평 바를 보여주지 않습니다).</p>
<p id="ImageList"><strong>ImageList</strong>: 이 방법으로 아이콘을 TreeView에 추가합니다. 단어 <em>ImageList</em> 다음에 바로 이전에 <a href="ListView.htm#IL_Create">IL_Create()</a>를 호출해 돌려 받은 ImageListID를 지정하십시오. 이 옵션은 TreeView를 생성할 때에만 효과가 있습니다 (그렇지만, <a href="#TV_SetImageList">TV_SetImageList()</a>는 이 제한이 없습니다). 다음은 작동하는 예제입니다:</p>
<pre>ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(10)  <em>; 최초 가용능력이 10개의 아이콘인 ImageList를 생성합니다.</em>
Loop 10  <em>; ImageList에 표준 시스템 아이콘을 적재합니다.</em>
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
Gui, Add, TreeView, ImageList%ImageListID%
<a href="#TV_Add">TV_Add</a>("Name of Item", 0, "Icon4")  <em>; 항목을 TreeView에 추가하고 거기에 폴더 아이콘을 부여합니다.</em>
Gui Show</pre>
<p><strong>Lines</strong>: <code>-Lines</code> (마이너스 Lines)를 지정하면 부모 항목을 자손 항목과 연결하는 줄들을 보여주지 않습니다. 그렇지만, 이 줄을 제거하면 최상위 레벨의 항목에 플러스/마이너스 버튼도 보이지 않게 됩니다.</p>
<p id="ReadOnly"><strong>ReadOnly:</strong> <code>-ReadOnly</code> (마이너스 ReadOnly)를 지정하면 각 항목의 텍스트/이름의 편집을 허용합니다. To edit an item, select it then press <kbd>F2</kbd> (see the <a href="#WantF2">WantF2</a> option below). 다른 방법으로, 항목을 한 번 클릭하여 선택할 수 있습니다. 약 반초 기다린 다음, 같은 항목을 다시 클릭해 편집할 수 있습니다. 편집이 끝난 후, 항목은 다음 예제를 통하여 그의 형제들 사이에 알파벳 순서로 재배치됩니다:</p>
<pre>Gui, Add, TreeView, -ReadOnly gMyTree  <em>; For gMyTree, see <a href="#notify">TreeView's g-label</a>.</em>
<em>; ...</em>
MyTree:
if (A_GuiEvent == "e")  <em>; 사용자가 항목 편집을 마쳤습니다 (대소문자를 구분해 비교합니다).</em>
    TV_Modify(TV_GetParent(A_EventInfo), "Sort")  <em>; 이것은 편집 항목에 부모가 없더라도 작동합니다.</em>
return</pre>
<p><strong>R</strong>: 행의 높이 (생성시). 기호 R 다음에 바로 콘트롤 안에 여유를 주기 위해 허용할 행의 개수를 지정하십시오. 예를 들어, <code>R10</code>이면 콘트롤을 10개의 항목 높이로 만듭니다.</p>
<p id="WantF2"><strong>WantF2</strong>: <code>-WantF2</code> (마이너스 WantF2)를 지정하면 <kbd>F2</kbd> 키눌림으로 현재 선택된 항목을 <a href="#ReadOnly">편집</a>하지 못하도록 막습니다. 이 설정은 <a href="#ReadOnly">-ReadOnly</a>도 켜져 있지 않는 한 무시됩니다. 이 설정에 상관없이, g-라벨은 여전히 <kbd>F2</kbd> <a href="#NotifyK">고지</a>를 받습니다.</p>
<p><strong>(이름 없는 번호 스타일):</strong> 위의 스타일 말고는 자주 사용되지 않기 때문에, 나머지 스타일은 이름이 없습니다. 리스트는 <a href="../misc/Styles.htm#TreeView">TreeView 스타일 테이블</a>을 참조하십시오.</p>

<h2 id="BuiltIn">TreeViews용 내장 함수</h2>
<p>모든 TreeView 함수는 현재 쓰레드의 <a href="Gui.htm#DefaultWin">기본 GUI 창</a>에 작동합니다 (기본 구이 창은 <code><a href="Gui.htm#Default">Gui, 2:Default</a></code>를 통하여 바꿀 수 있습니다). 기본 창이 존재하지 않거나 TreeView 콘트롤이 없다면, 모든 함수는 0을 돌려주어 문제를 나타냅니다.</p>
<p id="GuiTV">창에 여러 TreeView 콘트롤이 있다면, 기본값으로 함수들은 가장 최근에 추가된 콘트롤에 작동합니다. 이를 바꾸려면, <code>Gui, TreeView, TreeViewName</code>를 지정하십시오. 여기에서 <em>TreeViewName</em>는 TreeView의 <a href="Gui.htm#var">연관 변수</a>이름이거나, Window Spy로 노출되는 ClassNN이거나, 또는 (<span class="ver">[v1.1.04+]</span>에서) 그의 HWND입니다. 일단 바뀌면, 기존의 모든 그리고 미래의 <a href="../misc/Threads.htm">쓰레드</a>는 지시한 TreeView를 사용합니다. <span class="ver">[v1.1.23+]:</span> <a href="../Variables.htm#DefaultTreeView">A_DefaultTreeView</a> contains the current setting.</p>

<p id="bifAddModifyDelete"><strong>Item functions:</strong></p>
<ul>
    <li><a href="#TV_Add">TV_Add</a>: Adds a new item to the TreeView.</li>
    <li><a href="#TV_Modify">TV_Modify</a>: 항목의 이름과 속성을 변경합니다.</li>
    <li><a href="#TV_Delete">TV_Delete</a>: Deletes the specified item or all items.</li>
</ul>

<p id="bifGet"><strong>Retrieval functions:</strong></p>
<ul>
    <li><a href="#TV_GetSelection">TV_GetSelection</a>: 선택된 항목의 ID 번호를 돌려줍니다.</li>
    <li><a href="#TV_GetCount">TV_GetCount</a>: 콘트롤에 있는 항목의 총 개수를 돌려줍니다.</li>
    <li><a href="#TV_GetParent">TV_GetParent</a>: 지정된 항목의 부모를 항목 ID로 돌려줍니다.</li>
    <li><a href="#TV_GetChild">TV_GetChild</a>: 지정된 항목의 첫째/최상위 자손의 ID 번호를 돌려줍니다.</li>
    <li><a href="#TV_GetPrev">TV_GetPrev</a>: 지정된 항목 위의 형제의 ID 번호를 돌려줍니다.</li>
    <li><a href="#TV_GetNext">TV_GetNext</a>: Returns the ID number of the next item below the specified item.</li>
    <li><a href="#TV_GetText">TV_GetText</a>: Retrieves the text/name of the specified item.</li>
    <li><a href="#TV_Get">TV_Get</a>: Returns the ID number of the specified item if it has the specified attribute.</li>
</ul>

<p id="bifIcon"><strong>Other functions:</strong></p>
<ul>
    <li><a href="#TV_SetImageList">TV_SetImageList</a> <span class="ver">[v1.1.02+]</span>: Sets or replaces an ImageList for displaying icons.</li>
</ul>

<h3 id="TV_Add">TV_Add</h3>
<p>TreeView에 새 항목을 추가하고 그의 유일한 Item ID 번호를 돌려줍니다 (또는 실패시 0을 돌려줍니다).</p>
<pre class="Syntax"><span class="func">TV_Add</span>(Name, <span class="optional">ParentItemID, Options</span>)</pre>
<p><em>Name</em>은 항목을 보여주는 텍스트이며, 텍스트이거나 숫자일 수 있습니다 (숫치 <a href="../Variables.htm#Expressions">표현식</a>의 결과도 포함). <em>ParentItemID</em>는 새 항목의 부모 ID 번호입니다 (생략하거나 0을 지정하면 그 항목을 최상위 레벨에 추가합니다). 방대한 개수의 항목을 추가할 때, 수행성능을 개선할 수 있습니다. 항목을 추가하기 전에 <code>GuiControl, -Redraw, MyTreeView</code>를 사용하고 끝난 후에 <code>GuiControl, +Redraw, MyTreeView</code>를 사용하면 됩니다.</p>

<h4 id="Options_for_TV_Add_and_TV_Modify">TV_Add() 그리고 TV_Modify()용 옵션</h4>
<p><em>Options</em> 매개변수는아래 리스트의 단어로 구성되는 문자열입니다 (대소문자 구문 없음). 다음 단어와 스페이스나 탭으로 분리하십시오. 옵션을 제거하려면, 앞에 마이너스 사인을 추가하십시오. 옵션을 추가하려면, 플러스 사인을 허용하지만 필수는 아닙니다.</p>
<p id="Bold"><strong>Bold</strong>: 항목의 이름을 볼드체로 보여줍니다. 나중에 해제하려면, <code>TV_Modify(ItemID, "-Bold")</code>를 사용하십시오. <span class="ver">[v1.1.30.01+]:</span> 단어 <em>Bold</em>는 선택적으로 다음에 즉시 0 또는 1이 따라와 시작 상태를 나타낼 수 있습니다.</p>
<p id="Check"><strong>Check</strong>: (TreeView에 <a href="#Checked">체크박스</a>가 있다면) 체크 표식을 항목의 왼쪽에 보여줍니다. 나중에 해제하려면, <code>TV_Modify(ItemID, "-Check")</code>을 사용하십시오. 단어 <em>Check</em>는 선택적으로 다음에 즉시 0 또는 1이 따라와 시작 상태를 나타낼 수 있습니다. 다른 말로, <code>"Check"</code>와 <code>"Check" <strong>.</strong> VarContainingOne</code> 모두 같습니다 (여기에서 점은 <a href="../Variables.htm#concat">결합 연산자</a>입니다).</p>
<p id="Expand"><strong>Expand</strong>: 항목을 확대해 (있다면) 그의 자손을 노출시킵니다. 나중에 항목을 축소하려면, <code>TV_Modify(ItemID, "-Expand")</code>를 사용하십시오. 자손이 없다면, <a href="#TV_Modify">TV_Modify()</a>는 그 항목의 ID 대신에 0을 돌려줍니다. 대조적으로, <a href="#TV_Add">TV_Add()</a>는 항목에 자손이 나중에 거기에 추가될 경우 확대 표식을 합니다. (아래의) "Select"와 다르게, 항목이 확대되더라도 그의 부모가 자동으로 확대되지는 않습니다. 마지막으로, 단어 <em>Expand</em> 다음에 선택적으로 0 또는 1이 따라와 시작 상태를 나타낼 수 있습니다. 다른 말로, <code>"Expand"</code>와 <code>"Expand" <strong>.</strong> VarContainingOne</code>는 같습니다.</p>
<p><strong>First | Sort | N</strong>: 이 옵션들은 <a href="#TV_Add">TV_Add()</a>에만 적용됩니다. 새 항목의 위치를 그의 형제에 상대적으로 지정합니다 (형제(<em>sibling</em>)란 같은 레벨에 있는 다른 항목들입니다). 이 옵션들 모두 존재하지 않으면, 마지막/막내 형제로 새 항목이 추가됩니다. 그렇지 않으면, <em>First</em>를 추가해 그 항목을 첫째/장남 형제로 추가할 수 있습니다. 또는<em>Sort</em>를 지정하면 그 항목을 그의 형제들 사이에 알파벳 순서로 삽입할 수 있습니다. 평범한 정수가 (<strong>N</strong>) 지정되면, 그 다음에 새 항목을 추가할 형제의 ID 번호로 간주됩니다 (정수 N이 유일한 옵션이라면, 따옴표로 둘러쌀 필요가 없습니다).</p>
<p><strong>Icon</strong>: 단어 <em>Icon</em> 다음에 이 항목의 아이콘 번호를 지정하십시오. 이 아이콘은 항목의 이름 왼쪽에 보여집니다. 이 옵션이 없으면, <a href="#ImageList">ImageList</a>에서 첫 번째 아이콘이 사용됩니다. 빈 아이콘을 보여주려면, ImageList의 아이콘의 번호보다 더 큰 번호를 지정하십시오. 콘트롤에 ImageList가 없으면, 아이콘도 보이지 않고 아이콘을 위한 스페이스도 보존되지 않습니다.</p>
<p id="Select"><strong>Select</strong>: 항목을 선택합니다. 한 번에 오직 하나의 항목만 선택할 수 있기 때문에, 이전에 선택된 항목은 자동으로 해제됩니다. 게다가, 이 옵션은 필요하면 그의 부모를 확대해서 새로 선택된 항목을 노출시킵니다. 현재 선택을 알아 내려면, <a href="#TV_GetSelection">TV_GetSelection()</a>를 호출하십시오.</p>
<p><strong>Sort</strong>: <a href="#TV_Modify">TV_Modify()</a>에 대하여, 이 옵션은 알파벳 순서로 지정된 항목의 자손들을 정렬합니다. 대신에 모든 최상위 레벨의 항목들을 정렬하려면, <code>TV_Modify(0, "Sort")</code>를 사용하십시오. 자손이 없다면, 변경된 항목의 ID 대신에 0을 돌려줍니다.</p>
<p><strong>Vis</strong>: TreeView를 스크롤하거나 필요하면 그의 부모를 확대해서 항목이 완전히 보이도록 확인합니다.</p>
<p><strong>VisFirst</strong>: 위와 같지만 TreeView도 스크롤되어 가능하면 그 항목이 항상 위에 보이도록 합니다. 이 옵션은 전형적으로 <a href="#TV_Add">TV_Add()</a> 보다 <a href="#TV_Modify">TV_Modify()</a>와 사용할 때 더 효율적입니다.</p>

<h3 id="TV_Modify">TV_Modify</h3>
<p>항목의 이름과 속성을 변경합니다.</p>
<pre class="Syntax"><span class="func">TV_Modify</span>(ItemID <span class="optional">, Options, NewName</span>)</pre>
<p>성공하면 항목 자신의 ID를 돌려줍니다. 실패시 (또는 부분적 실패시) 0을 돌려줍니다. 첫 매개변수만 있으면, 지정된 항목이 <a href="#Select">선택됩니다</a>. <em>NewName</em>을 생략하면, 현재 이름을 바꾸지 않고 그대로 둡니다. <em>Options</em>에 관해서는 위의 리스트를 참조하십시오.</p>

<h3 id="TV_Delete">TV_Delete</h3>
<p>Deletes the specified item or all items.</p>
<pre class="Syntax"><span class="func">TV_Delete</span>(<span class="optional">ItemID</span>)</pre>
<p><em>ItemID</em>을 생략하면, TreeView 안의 <strong>모든</strong> 항목이 삭제됩니다. 그렇지 않으면, 오직 지정된 <em>ItemID</em>만 삭제됩니다. 성공하면 1 실패하면 0을 돌려줍니다.</p>

<h3 id="TV_GetSelection">TV_GetSelection</h3>
<p>선택된 항목의 ID 번호를 돌려줍니다.</p>
<pre class="Syntax"><span class="func">TV_GetSelection</span>()</pre>

<h3 id="TV_GetCount">TV_GetCount</h3>
<p>콘트롤에 있는 항목의 총 개수를 돌려줍니다.</p>
<pre class="Syntax"><span class="func">TV_GetCount</span>()</pre>
<p>이 함수는 언제나 순간적입니다. 왜냐하면 콘트롤의 개수를 추적관리하기 때문입니다.</p>

<h3 id="TV_GetParent">TV_GetParent</h3>
<p>지정된 항목의 부모를 항목 ID로 돌려줍니다.</p>
<pre class="Syntax"><span class="func">TV_GetParent</span>(ItemID)</pre>
<p>최상위 레벨의 항목들은 부모가 없으므로 0을 돌려줍니다.</p>

<h3 id="TV_GetChild">TV_GetChild</h3>
<p>지정된 항목의 첫째/최상위 자손의 ID 번호를 돌려줍니다 (없으면 0을 돌려줍니다).</p>
<pre class="Syntax"><span class="func">TV_GetChild</span>(ParentItemID)</pre>

<h3 id="TV_GetPrev">TV_GetPrev</h3>
<p>지정된 항목 위의 형제의 ID 번호를 돌려줍니다 (없으면 0을 돌려줍니다).</p>
<pre class="Syntax"><span class="func">TV_GetPrev</span>(ItemID)</pre>

<h3 id="TV_GetNext">TV_GetNext</h3>
<p>Returns the ID number of the next item below the specified item (or 0 if none).</p>
<pre class="Syntax"><span class="func">TV_GetNext</span>(<span class="optional">ItemID, ItemType</span>)</pre>
<p>다음 모드가 있습니다:</p>
<ul>
  <li>모든 매개변수를 생략하면, TreeView에서 첫째/최상위 항목의 ID 번호를 돌려줍니다 (없으면 0을 돌려줍니다).</li>
  <li>When only <em>ItemID</em> is present, it returns the ID number of the sibling below the specified item (or 0 if none). If <em>ItemID</em> is 0, it returns the ID number of the first/top item in the TreeView (or 0 if none).</li>
  <li>When <em>ItemType</em> is "Full" or "F", the next item is retrieved regardless of its relationship to the specified item. 이렇게 하면 스크립트는 쉽게 전체 트리를 항목별로 순회할 수 있습니다. 예를 들어:
    <pre>ItemID := 0  <em>; 회돌이의 첫 번째 반복이 트리의 최상단에서 검색을 시작하도록 만듭니다.</em>
Loop
{
    ItemID := TV_GetNext(ItemID, "Full")  <em>; 체크표식된 항목을 모두 찾으려면 "Full"을 "Checked"로 교체하십시오..</em>
    if not ItemID  <em>; 트리에 더 이상 항목이 없습니다.</em>
        break
    TV_GetText(ItemText, ItemID)
    MsgBox The next Item is %ItemID%, whose text is "%ItemText%".
}</pre>
  </li>
  <li>When <em>ItemType</em> is either "Check", "Checked", or "C", the same behavior as above is used except that any item without a checkmark is skipped over. 이렇게 하면 TreeView에 체크표식된 모든 항목을 하나씩 열람할 수 있습니다.</li>
</ul>

<h3 id="TV_GetText">TV_GetText</h3>
<p>지정된 <em>ItemID</em>의 텍스트/이름을 열람하고 그것을 <em>OutputVar</em>에 저장합니다.</p>
<pre class="Syntax"><span class="func">TV_GetText</span>(OutputVar, ItemID)</pre>
<p>텍스트가 8191자 보다 길면, 앞쪽 8191 글자만 열람됩니다. 성공하면, 함수는 그 항목의 ID를 돌려줍니다. 실패하면, 0을 돌려줍니다 (그리고 <em>OutputVar</em>도 비워집니다).</p>

<h3 id="TV_Get">TV_Get</h3>
<p>Returns the ID number of the specified item if it has the specified attribute.</p>
<pre class="Syntax"><span class="func">TV_Get</span>(ItemID, Attribute)</pre>
<p>지정된 항목에 지정된 속성이 없으면, 그 자신의 <em>ItemID</em>가 반환됩니다. 그렇지 않으면 0이 반환됩니다. For <em>Attribute</em>, specify "E", "Expand", or "Expanded" to determine if the item is currently <a href="#Expand">expanded</a> (that is, its children are being displayed); specify "C", "Check", or "Checked" to determine if the item has a <a href="#Check">checkmark</a>; or specify "B" or "Bold" to determine if the item is currently <a href="#Bold">bold</a> in font.</p>
<p class="note"><strong>주의:</strong> IF-서술문은 0 아닌 값을 참("true")으로 간주하므로, 다음의 두 줄은 기능적으로 동일합니다: <code>if TV_Get(ItemID, "Checked") = ItemID</code> and <code>if TV_Get(ItemID, "Checked")</code>.</p>

<h3 id="TV_SetImageList">TV_SetImageList <span class="ver">[v1.1.02+]</span></h3>
<p>Sets or replaces an <a href="#ImageList">ImageList</a> for displaying icons.</p>
<pre class="Syntax"><span class="func">TV_SetImageList</span>(ImageListID <span class="optional">, IconType</span>)</pre>
<p><em>ImageListID</em>는 이전에 <a href="ListView.htm#IL_Create">IL_Create()</a>를 호출해 반환된 번호입니다. <em>IconType</em> is normally omitted, in which case it defaults to 0. 그렇지 않으면, 2를 상태 아이콘에 지정하십시오 (아직 직접적으로 지원하지는 않지만, <a href="PostMessage.htm">SendMessage</a>를 통하여 사용할 수 있습니다). 성공하면, TV_SetImageList()는 이전에 TreeView에 연관되어 있는 <em>ImageListID</em>를 돌려줍니다 (연관된게 없으면 0을 돌려줍니다). 그렇게 떼어낸 ImageList는 <a href="ListView.htm#IL_Destroy">IL_Destroy(ImageListID)</a>를 통하여 정상적으로 파괴됩니다.</p>

<h2 id="notify">G-라벨 고지 (Primary)</h2>
<p><code><strong>g</strong>MySubroutine</code>과 같은 <a href="Gui.htm#label">g-label</a>은 콘트롤의 옵션에 나열할 수 있습니다. 이렇게 하면 사용자가 콘트롤에 어떤 조치를 수행할 때마다 <em>MySubroutine</em> 라벨이 자동으로 기동됩니다. 이 서브루틴은 내장 함수 <a href="../Variables.htm#Gui">A_Gui</a> 그리고 <a href="../Variables.htm#GuiControl">A_GuiControl</a> 을 참고해 어느 창과 어느 TreeView가 이벤트를 발생시켰는지 알아냅니다. 더 중요한 것은, <strong>A_GuiEvent</strong>를 참고할 수 있다는 것인데, 여기에 다음 문자열이나 기호 중 하나가 담겨 있습니다 (미래 버전과의 호환을 위해, 스크립트는 이것만이 가능한 유일한 값들이라고 간주하면 안됩니다):</p>
<p><strong>DoubleClick</strong>: 사용자가 항목을 더블클릭했습니다. 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>D</strong>: 사용자가 항목을 끌려고 시도했습니다 (현재 이를 내부적으로 지원하지 않습니다). 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>d</strong> (소문자 D): 왼클릭 끌기가 아니라 우클릭 끌기라는 점만 제외하면 위와 같습니다.</p>
<p><strong>e</strong> (소문자 E): 사용자가 항목 편집을 끝마쳤습니다 (사용자는 TreeView 옵션에 <code>-<a href="#ReadOnly">ReadOnly</a></code>일 경우에만 항목을 편집할 수 있습니다). 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>S</strong>: 사용자 또는 스크립트 자체에서 새 항목을 선택했습니다. 변수 A_EventInfo에 새로 선택된 그 항목의 ID가 담깁니다.</p>

<h2 id="G-Label_Notifications_Secondary">G-라벨 고지 (Secondary)</h2>
<p>TreeView의 <a href="#Options">옵션</a>에 단어 AltSubmit이 있다면, 그의g-라벨은 더 자주 기동되고 <strong>A_GuiEvent</strong>에는 다음의 값이 추가로 담길 수 있습니다:</p>
<p><strong>Normal</strong>: 사용자가 항목을 왼클릭 했습니다. 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>RightClick</strong>: 사용자가 항목을 우클릭했습니다. 변수 A_EventInfo에 그 항목의 ID가 담깁니다. 대부분의 경우, 이에 응답하여 메뉴를 보여주는 것이 좋습니다. 대신에, <a href="Gui.htm#GuiContextMenu">GuiContextMenu label</a>를 사용하십시오. 왜냐하면 Apps 키도 인지하기 때문입니다. 예를 들어:</p>
<pre>GuiContextMenu:  <em>; 우클릭 또는 Apps 키의 누름에 응답하여 기동됩니다.</em>
if (A_GuiControl != "MyTreeView")  <em>; 이 점검은 선택적입니다. TreeView 안에 클릭할 때만 메뉴를 보여줍니다.</em>
    return
<em>; 메뉴를 주어진 A_GuiX 그리고 A_GuiY 좌표에 보여줍니다. 이것을 사용해야 합니다
; 왜냐하면 사용자가 Apps 키를 누르더라도 올바른 좌표를 제공하기 때문입니다:</em>
Menu, MyContextMenu, Show, %A_GuiX%, %A_GuiY%
return</pre>
<p><strong>E</strong>: 사용자가 항목 편집을 시작했습니다 (사용자는 TreeView 옵션에 <a href="#ReadOnly">-ReadOnly</a>이 있을 경우에만 항목을 편집할 수 있습니다). 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>F</strong>: TreeView가 키보드 초점을 받았습니다.</p>
<p><strong>f</strong> (소문자 F): TreeView 가 키보드 초점을 잃어버렸습니다.</p>
<p id="NotifyK"><strong>K</strong>: TreeView가 초점이 있는 동안 사용자가 키를 눌렀습니다. A_EventInfo에 그 키의 가상 키코드가 담깁니다. 이 숫자는 범위가 1과 255 사이입니다. 키가 알파벳이면, 대부분의 키보드 레이아웃에서 <code><a href="Chr.htm">Chr(A_EventInfo)</a></code>를 통하여 상응하는 문자로 변환할 수 있습니다. <kbd>F2</kbd> is received regardless of <a href="#WantF2">WantF2</a>. 그렇지만, <kbd>Enter</kbd> 키눌림은 받지 않습니다; 그를 받으려면, <a href="#Enter">아래에</a> 기술하는 것처럼 기본 버튼을 사용하십시오.</p>
<p><strong>+</strong> (플러스 사인): 항목이 확대되어 그의 자손을 보여줍니다. 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>
<p><strong>-</strong> (마이너스 사인): 항목이 축소되어 그의 자손을 감춥니다. 변수 A_EventInfo에 그 항목의 ID가 담깁니다.</p>

<h2 id="Remarks">논평</h2>
<p><a href="Gui.htm#Submit">Gui Submit</a> 명령어는 TreeView 콘트롤에 아무 효과가 없습니다. 그러므로, 스크립트는 (있다면) TreeView의 <a href="Gui.htm#var">연관 변수</a>를 사용해 기타 데이터를 저장할 수 있습니다. 덮어쓸까봐 걱정할 필요가 없습니다.</p>
<p id="Enter">TreeView에 초점이 있는 동안 사용자가 <kbd>Enter</kbd>를 눌렀는지 탐지하려면, <a href="GuiControls.htm#DefaultButton">기본 버튼</a>을 사용하십시오 (원하면 감출 수 있습니다). 예를 들어:</p>
<pre>Gui, Add, Button, Hidden Default, OK
...
ButtonOK:
GuiControlGet, FocusedControl, FocusV
if (FocusedControl != "MyTreeView")
    return
MsgBox % "Enter was pressed. The selected item ID is " . TV_GetSelection()
return</pre>
<p>키보드로 한 항목에서 다른 항목으로 항해하는 것 말고도, 사용자는 한 항목의 이름의 첫 문자를 타자하여 점진 검색을 수행할 수도 있습니다. 이렇게 하면 선택이 부합하는 가장 가까운 항목으로 점프합니다.</p>
<p>길이에 상관없이 텍스트를 TreeView의 각 항목에 저장할 수 있지만, 오직 앞쪽 260 글자만 보여줍니다.</p>
<p>이론적으로 TreeView에서 항목의 개수는 최대 65536이지만, 항목을 추가할 수록 얼마 가지 않아 수행성능이 눈에 띄게 줄어듭니다. <a href="#TV_Add">TV_Add()</a>에 기술된 다시 그리기 팁을 사용하면 이를 약간 줄일 수 있습니다.</p>
<p id="ILremarks"><a href="ListView.htm">ListViews</a>와 다르게, TreeView의 ImageList는 TreeView가 파괴될 때 자동으로 파괴되지 않습니다. 그러므로, 스크립트는 TreeView의 창을 파괴하고 나면 반드시 <a href="ListView.htm#IL_Destroy">IL_Destroy(ImageListID)</a>를 호출해야 합니다. ImageList를 다른 곳에 사용할 생각이 없다면 말입니다. 그렇지만, 스크립트가 곧 끝날 경우라면 불필요합니다. 왜냐하면 그 때 모든 ImageLists도 자동으로 파괴되기 때문입니다.</p>
<p>스크립트는 창 당 하나 이상의 TreeView를 생성할 수 있습니다. 기본 말고 다른 TreeView를 처리하려면, <a href="#BuiltIn">내장 함수</a>를 참조하십시오.</p>
<p>TreeView의 글꼴을 바꾸거나 크기를 바꾸거나 숨기려면 <a href="GuiControl.htm">GuiControl</a>을 사용하십시오.</p>
<p>트리뷰 확장(Tree View eXtension (TVX))으로 TreeViews를 이동하고 삽입하고 제거할 수 있습니다. 다음 데모를 참조하십시오: <a href="https://www.autohotkey.com/forum/topic19021.html">www.autohotkey.com/forum/topic19021.html</a></p>

<h2 id="Related">관련 항목</h2>
<p><a href="ListView.htm">ListView</a>, <a href="GuiControls.htm">Other Control Types</a>, <a href="Gui.htm">Gui</a>, <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="../misc/Styles.htm#TreeView">TreeView 스타일 테이블</a></p>

<h2 id="Examples">예제</h2>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> 다음 스크립트는 이 페이지 위에 있는 예제에 비해 더 정교합니다. 모든-사용자 시작 메뉴의 모든 폴더를 담은 TreeView를 생성하고 부여줍니다. 사용자가 폴더를 선택하면, 그의 내용이 ListView 오른쪽에 나타납니다 (윈도우즈의 탐색기처럼). 게다가, <a href="GuiControls.htm#StatusBar">StatusBar</a> 콘트롤에 현재 선택된 폴더에 관한 정보를 보여줍니다.</p>
<pre><em>; 다음 폴더는 TreeView에 대하여 루트 폴더가 됩니다.
; C:\와 같이 전체 드라이브를 지정하면 약간 적재 시간이 걸립니다:</em>
TreeRoot := A_StartMenuCommon
TreeViewWidth := 280
ListViewWidth := A_ScreenWidth - TreeViewWidth - 30

<em>; 사용자에게 창을 끌어 크기를 변경하도록 허용합니다:</em>
Gui +Resize

<em>; ImageList를 만들고 거기에 표준 시스템 아이콘을 배정합니다:</em>
ImageListID := <a href="ListView.htm#IL_Create">IL_Create</a>(5)
Loop 5 
    <a href="ListView.htm#IL_Add">IL_Add</a>(ImageListID, "shell32.dll", A_Index)
<em>; <a href="#GuiAdd">TreeView</a>와 ListView를 나란히 만들어 마치 윈도우즈의 탐색기처럼 행위합니다:</em>
Gui, Add, TreeView, vMyTreeView r20 w%TreeViewWidth% gMyTreeView <a href="#ImageList">ImageList</a>%ImageListID%
Gui, Add, ListView, vMyListView r20 w%ListViewWidth% x+10, Name|Modified

<em>; ListView의 컬럼 너비를 설정합니다 (이것은 선택적입니다):</em>
Col2Width := 70  <em>; 오직 YYYYMMDD 부분만 보이도록 너비를 줄입니다.</em>
LV_ModifyCol(1, ListViewWidth - Col2Width - 30)  <em>; 수직 스크롤바를 위해 공간을 허용합니다.</em>
LV_ModifyCol(2, Col2Width)

<em>; 파일의 개수와 그의 총 크기에 관한 정보를 보여줄 <a href="GuiControls.htm#StatusBar">상태 바</a>를 생성합니다:</em>
Gui, Add, StatusBar
<a href="GuiControls.htm#SB_SetParts">SB_SetParts</a>(60, 85)  <em>; 바를 세 부분으로 생성합니다 (세 번째 부분에 나머지 너비를 모두 채웁니다).</em>

<em>; 폴더와 그의 부폴더덜을 트리에 추가합니다. 적재 시간이 걸릴 경우는 현재 상태를 보여줍니다:</em>
SplashTextOn, 200, 25, TreeView and StatusBar Example, Loading the tree...
AddSubFoldersToTree(TreeRoot)
SplashTextOff

<em>; 창을 보여주고 돌아갑니다. OS는 스크립트에게 사용자가 적절한 행위를 수행할 때마다 고지합니다:</em>
Gui, Show,, %TreeRoot%  <em>; 제목 바에 소스 디렉토리를 보여줍니다 (TreeRoot).</em>
return

AddSubFoldersToTree(Folder, ParentItemID = 0)
{
    <em>; 이 함수는 지정된 폴더의 모든 부폴더를 TreeView에 추가합니다..</em>
    <em>; 또한 깊이에 상관없이 자기 자신을 재귀해 내포된 폴더들을 수집합니다.</em>
    Loop %Folder%\*.*, 2  <em>; 모든 폴더의 부폴더들을 열람합니다.</em>
        AddSubFoldersToTree(A_LoopFileFullPath, <a href="#TV_Add">TV_Add</a>(A_LoopFileName, ParentItemID, "Icon4"))
}

MyTreeView:  <em>; 이 서브루틴은 사용자 행위를 처리합니다 (예를 들어 클릭).</em>
if (A_GuiEvent != "S")  <em>; 즉, "새로운 트리 항목 선택"이 아닌 이벤트.</em>
    return  <em>; 아무것도 하지 않습니다.
; 그렇지 않으면, ListView 내용을 선택된 폴더로 채웁니다.
; 먼처 선택된 폴더의 완전한 경로를 알아냅니다:</em>
<a href="#TV_GetText">TV_GetText</a>(SelectedItemText, A_EventInfo)
ParentID := A_EventInfo
Loop  <em>; 선택된 폴더에 대한 전체 경로를 구성합니다.</em>
{
    ParentID := <a href="#TV_GetParent">TV_GetParent</a>(ParentID)
    if not ParentID  <em>; 더 이상 조상 없음.</em>
        break
    TV_GetText(ParentText, ParentID)
    SelectedItemText := ParentText "\" SelectedItemText
}
SelectedFullPath := TreeRoot "\" SelectedItemText

<em>; 파일들을 ListView 안에 삽입합니다:</em>
LV_Delete()  <em>; 모든 행들을 지웁니다.</em>
GuiControl, -Redraw, MyListView  <em>; 적재하는 동안 다시 그리기를 꺼서 수행성능을 향상시킵니다.</em>
FileCount := 0  <em>; 아래 회돌이를 시작하기 전에 초기화합니다.</em>
TotalSize := 0
Loop %SelectedFullPath%\*.*  <em>; 간단하게 처리하기 위해, 폴더를 생략하고 ListView에 있는 파일들만 보입니다.</em>
{
    LV_Add("", A_LoopFileName, A_LoopFileTimeModified)
    FileCount += 1
    TotalSize += A_LoopFileSize
}
GuiControl, +Redraw, MyListView

<em>; 상태 바의 세 부분을 업데이트해 현재 선택된 폴더에 관한 정보를 보여줍니다:</em>
<a href="GuiControls.htm#SB_SetText">SB_SetText</a>(FileCount . " files", 1)
SB_SetText(Round(TotalSize / 1024, 1) . " KB", 2)
SB_SetText(SelectedFullPath, 3)
return

GuiSize:  <em>; 사용자의 창 크기 변경에 응답하여 ListView와 TreeView 크기를 조절합니다.</em>
if (A_EventInfo = 1)  <em>; 창은 최소화되어 있습니다. 아무 필요도 없습니다.</em>
    return
<em>; 그렇지 않으면, 창은 크기가 변경되거나 최대화되었습니다. 부합하는 콘트롤들의 크기를 조절합니다.</em>
GuiControl, Move, MyTreeView, % "H" . (A_GuiHeight - 30)  <em>; StatusBar와 여백에 -30을 지정합니다.</em>
GuiControl, Move, MyListView, % "H" . (A_GuiHeight - 30) . " W" . (A_GuiWidth - TreeViewWidth - 30)
return

GuiClose:  <em>; 사용자가 TreeView의 GUI 창을 닫으면 스크립트를 종료합니다.</em>
ExitApp</pre>
</div>

</body>
</html>
