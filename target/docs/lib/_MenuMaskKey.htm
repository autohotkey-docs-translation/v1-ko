<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>#MenuMaskKey - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The #MenuMaskKey directive changes which key is used to mask WIN or ALT keyup events." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#MenuMaskKey <span class="ver">[AHK_L 38+]</span></h1>

<p>Win 이벤트나 Alt 키뗌 이벤트를 마스크하기 위해 사용될 키를 변경합니다.</p>

<pre class="Syntax"><span class="func">#MenuMaskKey</span> KeyName</pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>KeyName</dt>
  <dd><p>A <a href="../KeyList.htm">키 이름</a> 또는 0 아닌 가상 키코드를 지정하는 <a href="../KeyList.htm#vk">VKnn</a> 연속열. Scan codes are used only in <span class="ver">[v1.1.28+]</span>, which also supports <a href="../KeyList.htm#sc">SCnnn</a> and VKnnSCnnn.</p></dd>

</dl>

<h2 id="Remarks">논평</h2>
<p>The mask key is sent automatically to prevent the Start menu or the active window's menu bar from activating at unexpected times.</p>
<p>The default mask key is <kbd>Ctrl</kbd>. This directive can be used to change the mask key to a key with fewer side effects.</p>
<p>Good candidates are virtual key codes which generally have no effect, such as vkE8, which Microsoft documents as "unassigned", or vkFF, which is reserved to mean "no mapping" (a key which has no function).</p>
<p class="note"><strong>주의</strong>: Microsoft can assign an effect to an unassigned key code at any time. For example, vk07 was once undefined and safe to use, but since Windows 10 1909 it is reserved for opening the game bar.</p>
<p><span class="ver">[v1.1.28+]:</span> Both the VK and SC can be specified, and are not required to match an existing key. Specifying <code>vk00sc000</code> will disable all automatic masking. Some values, such as zero VK with non-zero SC, may fail to suppress the Start menu.</p>
<p>이 설정은 전역적입니다. (스크립트 아무데서나) 한 번만 지정하면 전체 스크립트의 행위에 영향을 줄 수 있다는 뜻입니다.</p>
<p>다른 지시어처럼, #MenuMaskKey는 조건적으로 실행할 수 없습니다.</p>
<p><strong>단축키:</strong> 핫키를 키보드 갈고리나 마우스 갈고리를 사용하여 구현했다면, 마지막 키눌림은 활성창과 시스템에 보이지 않을 수도 있습니다. If the system was to detect <em>only</em> a Win or Alt keydown and keyup with no intervening keypress, it would usually activate a menu. To prevent this, the keyboard or mouse hook may automatically send the mask key.</p>
<p><span class="ver">[v1.1.27+]:</span> Pressing a hook hotkey causes the next Alt or Win keyup to be masked if all of the following conditions are met:</p>
<ul>
  <li>The hotkey is suppressed (it lacks the <a href="../Hotkeys.htm#Tilde">tilde modifier</a>).</li>
  <li><kbd>Alt</kbd> or <kbd>Win</kbd> is logically down when the hotkey is pressed.</li>
  <li>The modifier is physically down or the hotkey requires the modifier to activate. For example, <code>$#a::</code> in combination with <code>AppsKey::RWin</code> causes masking when <kbd>Menu</kbd>+<kbd>A</kbd> is pressed, but <kbd>Menu</kbd> on its own is able to open the Start Menu.</li>
  <li><kbd>Alt</kbd> is not masked if <kbd>Ctrl</kbd> was down when the hotkey was pressed, since <kbd>Ctrl</kbd>+<kbd>Alt</kbd> does not activate the menu bar.</li>
  <li><kbd>Win</kbd> is not masked if the most recent Win keydown was modified with <kbd>Ctrl</kbd>, <kbd>Shift</kbd> or <kbd>Alt</kbd>, since the Start Menu does not normally activate in those cases. However, key-repeat occurs even for <kbd>Win</kbd> if it was the last key physically pressed, so it can be hard to predict <em>when</em> the most recent Win keydown was.</li>
  <li>Either the keyboard hook is not installed (i.e. for a mouse hotkey), or there have been no other (unsuppressed) keydown or keyup events since the last Alt or Win keydown. Note that key-repeat occurs even for modifier keys and even after sending other keys, but only for the last physically pressed key.</li>
</ul>
<p>Mouse hotkeys may send the mask key immediately if the keyboard hook is not installed.</p>
<p>Hotkeys with the <a href="../Hotkeys.htm#Tilde">tilde modifier</a> are not intended to block the native function of the key, so in <span class="ver">[v1.1.27+]</span> they do not cause masking. Hotkeys like <code>~#a::</code> still suppress the menu, since the system detects that <kbd>Win</kbd> has been used in combination with another key. However, mouse hotkeys and both <kbd>Win</kbd> themselves (<code>~LWin::</code> and <code>~RWin::</code>) do not suppress the Start Menu.</p>
<p>The Start Menu (or the active window's menu bar) can be suppressed by sending any keystroke. The following example disables the ability for the left <kbd>Win</kbd> to activate the Start Menu, while still allowing its use as a modifier:</p>
<pre>~LWin::Send {Blind}{vkE8}</pre>
<p><strong>Send:</strong> <a href="Send.htm">Send</a>, <a href="ControlSend.htm">ControlSend</a> and related often release modifier keys as part of their normal operation. For example, the hotkey <code>&lt;#a::SendRaw %Address%</code> usually must release the left <kbd>Win</kbd> prior to sending the contents of <em>Address</em>, and press the left <kbd>Win</kbd> back down afterward (so that other Win key combinations continue working). The mask key may be sent in such cases to prevent a Win or Alt keyup from activating a menu.</p>

<h2 id="Related">관련 항목</h2>
<p>배경 정보는 <a href="https://www.autohotkey.com/board/topic/20619-extraneous-control-key-presses-generated-by-or-hotkeys/">이 쓰레드</a>를 참조하십시오.</p>

<h2 id="Examples">예제</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 기본 사용법.</p>
<pre>#MenuMaskKey vkE8  <em>; Change the masking key to something unassigned such as vkE8.</em>
#Space::Run % A_ScriptDir  <em>; An additional Ctrl keystroke is not triggered.</em></pre>
</div>

<div class="ex" id="ExAdvanced">
<p><a class="ex_number" href="#ExAdvanced"></a> Shows in detail how this directive causes vkFF to be sent instead of LControl.</p>
<pre>#MenuMaskKey vkFF  <em>; vkFF is no mapping.</em>
#UseHook
#Space::
!Space::
    KeyWait LWin
    KeyWait RWin
    KeyWait Alt
    KeyHistory
return</pre>
</div>

</body>
</html>
