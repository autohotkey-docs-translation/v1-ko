<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Loop (parse a string) - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Loop Parse statement retrieves substrings (fields) from a string, one at a time." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (문자열 파싱)</h1>

<p>문자열로부터 서브스트링(필드)를 한 번에 하나씩 파싱합니다.</p>

<pre class="Syntax"><span class="func">Loop, Parse</span>, InputVar <span class="optional">, Delimiters, OmitChars</span></pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>Parse</dt>
  <dd><p>이 개변수는 단어 PARSE만 됩니다. 다른 회돌이 유형과 다르게, 변수 참조는 단어 PARSE로 결정된다고 할지라도 허용하지 않습니다.</p></dd>

  <dt>InputVar</dt>
  <dd>
    <p>내용을 분석할 변수의 이름. 이름을 퍼센트 사인으로 둘러 싸지 마십시오. 변수의 <em>내용</em>을 이름으로 사용하고 싶다면 예외입니다.</p>
    <p><span class="ver">[v1.1.21+]:</span> 이 매개변수는 <code>% <a href="../Variables.htm#Expressions">표현식</a></code>이 될 수 있지만, 퍼센트-스페이스 접두사가 반드시 사용되어야 합니다.</p>
  </dd>

  <dt>Delimiters</dt>
  <dd><p>이 매개변수가 비어 있거나 생략되면, <em>InputVar</em>의 각 문자는 별도의 부문자열로 간주됩니다.</p>
      <p>이 매개변수가 <strong>CSV</strong>이면, <em>InputVar</em>는 표준의 쉼표로 가른 값 형식으로 해석됩니다. 다음은 CSV줄의 예로서 MS Excel로 생산했습니다:</p>
<pre class="no-highlight">"first field",SecondField,"the word ""special"" is quoted literally",,"last field, has literal comma"</pre>
      <p>그렇지 않으면, <em>Delimiters</em>에는 하나 이상의 문자가 담깁니다 (대소문자 구별), 각 문자마다 <em>InputVar</em>에서 부문자열이 일어나는 경계를 결정합니다.</p>
      <p>Delimiter 문자들은 부문자열 자체의 일부로 간주되지 않습니다. 또, <em>InputVar</em> 안에서 한 쌍의 구분자 사이에 아무것도 없다면, 상응하는 문자열은 비어 있습니다.</p>
      <p>예를 들어: <code>`,</code> (피신된 쉼표)는 문자열을 쉼표가 출현할 때마다 가릅니다. 비슷하게, "%A_Tab%%A_Space%"는 <em>InputVar</em>에서 스페이스나 탭을 만날 때마다 새 문자열을 시작시킵니다.</p>
      <p>To use a string as a delimiter rather than a character, first use <a href="StrReplace.htm">StrReplace()</a> or <a href="StringReplace.htm">StringReplace</a> to replace all occurrences of the string with a single character that is never used literally in the text, e.g. one of these special characters: ¢¤¥¦§©ª«®µ¶. 다음 예제를 연구해 보십시오. 문자열 &lt;br&gt;을 구분자로 사용합니다:</p>
      <pre>StringReplace, NewHTML, HTMLString, &lt;br&gt;, ¢, All
Loop, parse, NewHTML, ¢ <em>; 센트 심볼에 기반하여 문자열을 해석합니다.</em>
{
...
}</pre></dd>

  <dt>OmitChars</dt>
  <dd><p>각 부문자열의 선두와 후미에서 배제할 문자의 (선택적) 리스트 (대소문자 구분). 예를 들어, <em>OmitChars</em>가 %A_Space%%A_Tab%이면, 스페이스와 탭이 열람된 매 부문자열로부터 선두와 후미에서 제거됩니다 (가운데는 아님).</p>
    <p><em>Delimiters</em>가 비어 있으면, <em>OmitChars</em>는 고려 대상에서 배제할 문자들을 가리킵니다 (회돌이는 그런 문자들을 보지 못합니다).</p>
    <p>대부분의 다른 명령어의 마지막 매개변수와 다르게, <em>OmitChars</em>에서 쉼표는 반드시 피신시켜야 합니다 (`,).</p></dd>

</dl>

<h2 id="Remarks">논평</h2>
<p>문자열 파싱 회돌이는 문자열에 들어 있는 각 필드를 한 번에 하나씩 처리할 때 유용합니다. Parsing loops use less memory than <a href="StrSplit.htm">StrSplit()</a> or <a href="StringSplit.htm">StringSplit</a> (since it creates a permanent <a href="../misc/Arrays.htm#object-based">array</a> or <a href="../misc/Arrays.htm#pseudo">pseudo-array</a>) and in most cases they are easier to use.</p>
<p id="LoopField">내장 변수 <strong>A_LoopField</strong>는 모든 파싱 회돌이 안에 존재합니다. 안에 <em>InputVar</em>로부터 파싱한 현재의 부문자열(필드)가 들어 있습니다. 내부 파싱 회돌이가 바깥 파싱 회돌이로 둘러 싸여 있다면 내부 회돌이의 필드가 우선 순위가 높습니다.</p>
<p>내장 변수 "A_LoopDelimiter"는 전혀 없지만, 이 페이지 맨 아래 예제는 각 필드마다 어느 구분자를 사용하고 있는 보여줍니다.</p>
<p><em>InputVar</em>의 크기 또는 그의 필드의 크기에는 제한이 없습니다. 게다가, <em>InputVar</em>의 내용이 회돌이를 실행하는 동안에 바뀐다면, 그 회돌이는 그 변화를 "보지 못합니다". 왜냐하면 원래 내용의 임시 사본을 처리하고 있기 때문입니다.</p>
<p>해석하기 전에 필드를 다른 순서로 정돈하려면, <a href="Sort.htm">Sort</a> 명령어를 사용하십시오.</p>
<p><a href="Block.htm">Blocks</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, 그리고 A_Index 변수 (모든 유형의 회돌이에 존재함)에 관한 정보는 <a href="Loop.htm">Loop</a>를 참조하십시오.</p>
<h2 id="Related">관련 항목</h2>
<p><a href="StrSplit.htm">StrSplit()</a>, <a href="LoopReadFile.htm">파일-읽기 회돌이</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">블록</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a>, <a href="StringSplit.htm">StringSplit</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Parses a comma-separated string.</p>
<pre>Colors := "red,green,blue"
Loop, parse, Colors, `,
{
    MsgBox, Color number %A_Index% is %A_LoopField%.
}</pre>
</div>

<div class="ex" id="ExFileRead">
<p><a class="ex_number" href="#ExFileRead"></a> 변수 안에 줄들을 하나씩 읽어 들입니다 (<a href="LoopReadFile.htm">파일-읽기</a> 회돌이와 유사). <a href="FileRead.htm">FileRead</a>를 통하여 파일을 변수 안에 적재할 수 있습니다.</p>
<pre>Loop, parse, FileContents, `n, `r  <em>; `n을 먼저 `r을 다음에 지정해야 Windows와 Unix 파일을 모두 해석할 수 있습니다.</em>
{
    MsgBox, 4, , Line number %A_Index% is %A_LoopField%.`n`nContinue?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExClipboard">
<p><a class="ex_number" href="#ExClipboard"></a> 위의 예제와 같지만 클립보드용입니다. 클립보드에 파일이 담겨 있을 때 유용합니다. 그런 파일은 보통 탐색창으로부터 복사됩니다 (프로그램은 자동으로 그런 파일을 그들의 파일 이름으로 변환합니다).</p>
<pre>Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , File number %A_Index% is %A_LoopField%.`n`nContinue?
    IfMsgBox, No, break
}</pre>
</div>

<div class="ex" id="ExCSV">
<p><a class="ex_number" href="#ExCSV"></a> 쉼표로 가른 값 (CSV) 파일을 해석합니다.</p>
<pre>Loop, read, C:\Database Export.csv
{
    LineNumber := A_Index
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Field %LineNumber%-%A_Index% is:`n%A_LoopField%`n`nContinue?
        IfMsgBox, No
            return
    }
}</pre>
</div>

<div class="ex" id="ExDelimiter">
<p><a class="ex_number" href="#ExDelimiter"></a> 어느 구분자에 마주했는지 알아내기.</p>
<pre><em>; 검색할 문자열을 초기화 합니다.</em>
Colors := "red,green|blue;yellow|cyan,magenta"
<em>; 문자열에서 위치를 추적할 계수를 초기화합니다.</em>
Position := 0

Loop, Parse, Colors, `,|;
{
    <em>; 이 필드의 끝에서 구분자의 위치를 계산합니다.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; 해석 회돌이가 발견한 구분자를 열람합니다.</em>
    Delimiter := SubStr(Colors, Position, 1)

    MsgBox Field: %A_LoopField%`nDelimiter: %Delimiter%
}</pre>
</div>

</body>
</html>
