<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>RegRead - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The RegRead command reads a value from the registry." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegRead</h1>
<p>값을 레지스트리에서 읽습니다.</p>

<h2 id="new">New Syntax  <span class="ver">[v1.1.21+]</span></h2>
<pre class="Syntax"><span class="func">RegRead</span>, OutputVar, KeyName <span class="optional">, ValueName</span></pre>

<h3 id="New_Parameters">매개변수</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>열람된 값을 저장할 변수의 이름. 변수를 열람할 수 없으면, 변수는 비워지고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 1이 설정됩니다.</p></dd>

  <dt>KeyName</dt>
  <dd><p>The full name of the registry key.</p>
      <p>This must start with HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, or HKEY_CURRENT_CONFIG (or the abbreviations for each of these, such as HKLM). <a href="LoopReg.htm#remote">원격 레지스트리</a>에 접근하려면, 컴퓨터 이름을 앞에 두고 다음에 쌍점 (또는 <span class="ver">[in v1.1.21+]</span>이면, 역사선)을, 다음 예제와 같이 배치하십시오: <code>\\workstation01:HKEY_LOCAL_MACHINE</code></p></dd>

  <dt>ValueName</dt>
  <dd><p>열람될 값의 이름. 생략하면, <em>KeyName</em>의 기본 값이 열람됩니다. 이 값은 RegEdit이 "(Default)"로 보여주는 값입니다. 기본 값이 없다면 (즉, RegEdit "value not set"이라고 보여주면), <em>OutputVar</em>는 비워지고 ErrorLevel은 1이 설정됩니다.</p></dd>

</dl>

<h2 id="old">Old Syntax</h2>
<p class="warning"><strong>비추천:</strong> 이 구문는 새 스크립트에 사용을 추천하지 않습니다. Use the <a href="#new">new syntax</a> instead.</p>
<pre class="Syntax"><span class="func">RegRead</span>, OutputVar, RootKey, SubKey <span class="optional">, ValueName</span></pre>

<h3 id="Old_Parameters">매개변수</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>열람된 값을 저장할 변수의 이름. 변수를 열람할 수 없으면, 변수는 비워지고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 1이 설정됩니다.</p></dd>

  <dt>RootKey</dt>
  <dd><p>반드시 HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, 또는 HKEY_CURRENT_CONFIG 중의 하나여야 합니다. (또는 HKLM와 같은 약어). <a href="LoopReg.htm#remote">원격 레지스트리</a>에 접근하려면, 컴퓨터 이름을 앞에 두고 다음에 쌍점 (또는 <span class="ver">[in v1.1.21+]</span>이면, 역사선)을, 다음 예제와 같이 배치하십시오: <code>\\workstation01:HKEY_LOCAL_MACHINE</code></p></dd>

  <dt>SubKey</dt>
  <dd><p>서브키의 이름 (예, Software\SomeApplication).</p></dd>
  
  <dt>ValueName</dt>
  <dd><p>열람될 값의 이름. 생략하면, <em>SubKey</em>의 기본 값이 열람됩니다. 이 값은 RegEdit이 "(Default)"로 보여주는 값입니다. 기본 값이 없다면 (즉, RegEdit "value not set"이라고 보여주면), <em>OutputVar</em>는 비워지고 ErrorLevel은 1이 설정됩니다.</p></dd>

</dl>

<h2 id="Error_Handling">에러 처리</h2>
<p><span class="ver">[v1.1.04+]</span>: 이 명령어는 실패하면 예외를 던질 수 있습니다. 더 자세한 정보는 <a href="Catch.htm#RuntimeErrors">실행시간 에러</a>를 참조하십시오.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 문제가 있었으면 1이 설정되고 (예를 들어 존재하지 않는 값이나 키) 그렇지 않으면 0이 설정됩니다.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a>는 운영 체제의 GetLastError() 함수의 결과가 설정됩니다.</p>

<h2 id="Remarks">논평</h2>
<p>현재 다음의 값 유형만 지원됩니다: REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, 그리고 REG_BINARY.</p>
<p>REG_DWORD 값은 언제나 양의 십진수로 표현됩니다. If the number was intended to be negative, convert it to a signed 32-bit integer by using <code>OutputVar := OutputVar &lt;&lt; 32 &gt;&gt; 32</code> or similar.</p>
<p>REG_BINARY 키를 읽을 때 그 결과는 십육진 문자로 구성된 문자열입니다. 예를 들어 REG_BINARY 값이 01,a9,ff,77이면 문자열 01A9FF77로 읽힙니다.</p>
<p>REG_MULTI_SZ 키를 읽을 때, 각 구성요소는 라인피드 문자로 끝납니다 (`n). 구성요소가 없다면, <em>OutputVar</em>는 비워집니다. <em>OutputVar</em>로부터 개별적으로 구성요소를 추출하는 방법을 보여주는 예는 <a href="FileSelectFile.htm">FileSelectFile</a>을 참조하십시오.</p>
<p><span class="ver">[v1.1.10.01+]</span>: REG_BINARY values larger than 64K can also be read.</p>
<p>여러 키와 값에 작동하고 열람하려면, <a href="LoopReg.htm">레지스트리-회돌이</a>의 사용을 고려하십시오.</p>
<p>원격 컴퓨터의 레지스트리에 접근하는 법에 관한 자세한 정보는 <a href="LoopReg.htm">레지스트리-회돌이</a>에서 논평을 참조하십시오.</p>
<p>32-비트 스크립트에서 64-비트 섹션의 레지스트리로부터 엔트리를 또는 그 반대로 읽고 쓰려면, <a href="SetRegView.htm">SetRegView</a>를 사용하십시오.</p>

<h2 id="Related">관련 항목</h2>
<p><a href="RegDelete.htm">RegDelete</a>, <a href="RegWrite.htm">RegWrite</a>, <a href="LoopReg.htm">레지스트리-회돌이</a>, <a href="SetRegView.htm">SetRegView</a>, <a href="IniRead.htm">IniRead</a></p>

<h2 id="Examples">예제</h2>
<div class="ex" id="ExNewVsOld">
<p><a class="ex_number" href="#ExNewVsOld"></a> New syntax vs. old syntax.</p>
<p>Despite the different syntax, both examples have the same effect; that is, they read a value from the registry and store it in <var>OutputVar</var>.</p>
<pre>RegRead, OutputVar, HKEY_LOCAL_MACHINE\Software\SomeApplication, TestValue</pre>
<pre>RegRead, OutputVar, HKEY_LOCAL_MACHINE, Software\SomeApplication, TestValue</pre>
</div>

<div class="ex" id="ExProgramFiles">
<p><a class="ex_number" href="#ExProgramFiles"></a> Retrieves and reports the path of the "Program Files" directory. See <a href="EnvGet.htm#ExProgramFiles">EnvGet example #2</a> for an alternative method.</p>
<pre><em>; 아래의 줄은 OS는 64-비트인데 스크립트는 그렇지 않을 경우,
; 64-비트 프로그램 파일의 경로가 반환된다는 것을 확인합니다.</em>
<a href="SetRegView.htm">SetRegView</a> 64  <em>; <span class="ver">[v1.1.08+]</span> 필요</em>

RegRead, OutputVar, HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion, ProgramFilesDir
MsgBox, Program files are in: %OutputVar%</pre>
</div>

<div class="ex" id="ExType">
<p><a class="ex_number" href="#ExType"></a> 레지스트리 값의 유형을 열람합니다 (예, REG_SZ 또는 REG_DWORD).</p>
<pre>MsgBox % RegKeyType("HKCU", "Environment", "TEMP")
return

RegKeyType(RootKey, SubKey, ValueName)  <em>; 이 함수는 지정된 값의 유형을 돌려줍니다.</em>
{
    Loop, %RootKey%, %SubKey%
        if (A_LoopRegName = ValueName)
            return A_LoopRegType
    return "Error"
}</pre>
</div>

</body>
</html>
