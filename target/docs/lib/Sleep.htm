<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Sleep - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Sleep command waits the specified amount of time before continuing." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Sleep</h1>

<p>지정된 시간 동안 기다린 다음 계속 진행합니다.</p>

<pre class="Syntax"><span class="func">Sleep</span>, DelayInMilliseconds</pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>Delay</dt>
  <dd><p>멈출 시간 (밀리초 단위), 0부터 2147483647까지 (24 일), <a href="../Variables.htm#Expressions">표현식</a> 가능.</p></dd>

</dl>

<h2 id="Remarks">논평</h2>
<p>OS의 시간-유지 시스템의 정밀도 때문에, <em>지연 시간</em>은 보통 (하드웨어와 설치된 드라이버의 종류에 따라) 가장 가까운 10 또는 15.6 밀리초의 배수로 올림됩니다. 예를 들어, 지연시간이 1부터 10(포함) 사이이면 대부분의 Windows 2000/XP 시스템에서 10 또는 15.6과 동등합니다. 더 짧은 지연 시간이 필요하면, 다음 <a href="#ShorterSleep">예제</a>를 참조하십시오.</p>
<p>실제 지연 시간은 CPU에 부하가 많을 경우 요구한 것보다 더 길어질 가능성이 있습니다. 이것은 OS가 스크립트에 또다른 시간조각(timeslice)을 주기 전에 각각의 필요한 프로세스에 CPU 시간을 나누어 주기 때문입니다 (보통 20 밀리초).</p>
<p>지연 시간이 0일 경우 (다른 스크립트보다 <a href="Process.htm#Priority">우선 순위</a>가 엄청나게 낮지만 않다면) 그를 필요로 하는 다른 프로세스에 스크립트의 현재 시간조각(timeslice)의 나머지를 나누어 줍니다. 그래서, 지연 시간이 0이면 실제 지연 시간은 필요로 하는 프로세스의 개수에 따라 0부터 20ms (이상)이 생산됩니다 (필요로 하는 프로세스가 없다면, 전혀 지연 시간이 없습니다). 그렇지만, <em>Delay</em>가 0이면 더 긴 <em>Delay</em>가 걸렸을 지연 시간보다 언제나 떠 짧게 끝납니다.</p>
<p>잠자는 동안, <a href="../Hotkeys.htm">핫키</a>, <a href="Menu.htm">맞춤 메뉴 항목</a>, 또는 <a href="SetTimer.htm">타이머</a>를 통하여 새 <a href="../misc/Threads.htm">쓰레드</a>를 기동할 수 있습니다.</p>
<p><strong>Sleep -1</strong>: 지연 시간이 -1이면 잠자지 않지만 대신에 스크립트가 즉시 그의 메시지 큐를 점검하도록 만듭니다. 이것을 사용하면 보류된 <a href="../misc/Threads.htm">인터럽트들</a>을 무작위로 아무데서나 일어나도록 두지 않고 강제로 특정한 위치에서 일어나게 만들 수 있습니다. 자세한 것은 <a href="Critical.htm">Critical</a>을 참조하십시오.</p>
<h2 id="Related">관련 항목</h2>
<p><a href="SetKeyDelay.htm">SetKeyDelay</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="SetControlDelay.htm">SetControlDelay</a>, <a href="SetWinDelay.htm">SetWinDelay</a>, <a href="SetBatchLines.htm">SetBatchLines</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Waits 1 second before continuing execution.</p>
<pre>Sleep 1000</pre>
</div>

<div class="ex" id="ExExpr">
<p><a class="ex_number" href="#ExExpr"></a> Waits 30 minutes before continuing execution.</p>
<pre>MyVar := 30 * 60000 <em>; 30 means minutes and times 60000 gives the time in milliseconds.</em>
Sleep MyVar <em>; Sleep for 30 minutes.</em></pre>
</div>

<div class="ex" id="ShorterSleep">
<p><a class="ex_number" href="#ShorterSleep"></a> Demonstrates how to sleep for less time than the normal 10 or 15.6 milliseconds. 주의: 스크립트가 이런 식으로 실행 중인 동안, 전체 운영체제와 어플이 모두 아래의 timeBeginPeriod에 영향을 받습니다.</p>
<pre>SetBatchLines -1  <em>; 이 방법이 최대로 효과가 있도록 확인합니다.</em>

SleepDuration := 1  <em>; 이것은 종종 아래의 값에 따라 미세하게 조절할 수 있습니다 (예,  2는 3과 다릅니다).</em>
TimePeriod := 3 <em>; 7 또는 3을 시도합니다. 아래 주석을 참조하십시오.
; 잠자기 시간이 보통 15.6 밀리초로 올림되는 PC라면, TimePeriod:=7을 시도하면
; 약간 더 짧은 수면 시간을 허용하고, TimePeriod:=3 이하를 시도하면 가능한 짧은 수면 시간을 허용합니다.</em>

DllCall("Winmm\timeBeginPeriod", "UInt", TimePeriod)  <em>; 이 스크립트의 DllCall("Sleep"...)은 물론이고 모든 어플리케이션에 영향을 줍니다. 그러나 SetTimer에는 영향을 미치지 않습니다.</em>
Iterations := 50
StartTime := A_TickCount

Loop %Iterations%
    DllCall("Sleep", "UInt", SleepDuration)  <em>; Sleep 명령어 대신에 DllCall을 사용해야 합니다.</em>

DllCall("Winmm\timeEndPeriod", "UInt", TimePeriod)  <em>; 시스템을 정상으로 복구하려면 호출해야 합니다.</em>
MsgBox % "Sleep duration = " . (A_TickCount - StartTime) / Iterations</pre>
</div>

</body>
</html>
