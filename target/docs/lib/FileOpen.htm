<!DOCTYPE HTML>
<html>
<head>
<title>FileOpen() - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The FileOpen function opens a file to read specific content from it and/or to write new content into it." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">
.sized {
  width: 3em;
}
</style>
</head>
<body>

<h1>FileOpen() <span class="ver">[AHK_L 42+]</span></h1>

<p>Opens a file to read specific content from it and/or to write new content into it.</p>
<pre class="Syntax">file := <span class="func">FileOpen</span>(Filename, Flags <span class="optional">, Encoding</span>)</pre>

<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>Filename</dt>
  <dd>
    <p>열 파일의 경로. 절대 경로를 지정하지 않으면 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>에 있다고 간주됩니다.</p>
    <p><span class="ver">[v1.1.17+]:</span> 표준 입력/출력/에러 스트림을 열려면 별표를 (또는 별표 두 개를) 아래에 보여주는 바와 같이 지정하십시오:</p>
    <pre>
FileOpen("*", "r")   <em>; 표준입력</em>
FileOpen("*", "w")   <em>; 표준출력</em>
FileOpen("**", "w")  <em>; 표준에러</em></pre>
  </dd>

  <dt>Flags</dt>
  <dd><p><span class="ver">[in AHK_L 54+]</span> 원하는 접근 모드를 가리키는 문자 그리고 다음에 다른 옵션이 따라와 구성된 문자열 (선택적으로 사이에 스페이스 또는 탭); 또는 <span class="ver">[ AHK_L 42+]</span> 숫치 플래그의 조합 (합계). 지원되는 값들은 아래 테이블에 기술합니다.</p></dd>

  <dt>Encoding</dt>
  <dd><p>파일에 UTF-8 또는 UTF-16 <a href="https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8_%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D">바이트 순서 표식</a>이 없을 때, 또는 <code>h</code> (핸들) 프래그가 사용될 때 텍스트 I/O에 사용할 코드 페이지입니다. 생략되면, <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>의 현재 값이 사용됩니다.</p></dd>

</dl>

<h2 id="Flags">Flags</h2>

<h3 id="Access_modes">접근 모드 (서로-배타적임)</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">십진수 값</th>
    <th class="sized right">십육진수 값</th>
    <th abbr="설명">설명</th>
  </tr>
  <tr>
    <td class="center">r</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Read:</i> 파일이 존재하지 않으면 실패합니다.</td>
  </tr>
  <tr>
    <td class="center">w</td>
    <td class="right">1</td>
    <td class="right">0x1</td>
    <td><i>Write:</i> 새 파일을 생성합니다, <b style="color:red">기존의 파일을 덮어쓰기 합니다</b>.</td>
  </tr>
  <tr>
    <td class="center">a</td>
    <td class="right">2</td>
    <td class="right">0x2</td>
    <td><i>Append:</i> 파일이 존재하지 않으면 새 파일을 생성합니다, 그렇지 않으면 파일 포인터를 파일의 끝으로 이동합니다.</td>
  </tr>
  <tr>
    <td class="center">rw</td>
    <td class="right">3</td>
    <td class="right">0x3</td>
    <td><i>Read/Write:</i> 파일이 존재하지 않으면 새 파일을 생성합니다.</td>
  </tr>
  <tr>
    <td class="center">h</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td><i>Filename</i>이 객체 안에 싸 넣을 파일 핸들임을 나타냅니다. 공유 모드 플래그는 무시됩니다. 그리고 이 핸들이 가리키는 파일이나 스트림은 바이트 순서 표식이 점검되지 않습니다. 파일 핸들은 파일 객체가 파괴될 때 자동으로 <b>잠기지 않습니다</b>. 그리고 <a href="../objects/File.htm#Close">Close</a>를 호출해 봐야 아무 효과도 없습니다. 주의 하십시오. <i>Filename</i>이 파이프나 통신 장치 같이 위치 지정이 안되는(nonseeking) 장치를 가리키는 핸들이면 <a href="../objects/File.htm#Seek">Seek</a>, <a href="../objects/File.htm#Tell">Tell</a> 그리고 <a href="../objects/File.htm#Length">Length</a>를 사용하면 안 됩니다.</td>
  </tr>
</table>

<h3 id="Sharing_mode_flags">공유 모드 플래그</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">십진수 값</th>
    <th class="sized right">십육진수 값</th>
    <th abbr="설명">설명</th>
  </tr>
  <tr>
    <td class="center">-rwd</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>읽기, 쓰기 그리고 지우기 접근을 위해 파일을 잠금니다. <code>r</code>, <code>w</code> 그리고 <code>d</code>을 조합해 사용해도 됩니다. <code>-</code>를 지정하면 <code>-rwd</code>를 지정한 것과 같습니다. 완전히 생략하면, 기본은 모든 접근을 공유하는 것입니다.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">0</td>
    <td class="right">0x0</td>
    <td><i>Flags</i>가 숫치이면, 공유 모드 플래그가 없을 경우 파일이 잠깁니다.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">256</td>
    <td class="right">0x100</td>
    <td><i>read</i> 접근을 공유합니다.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">512</td>
    <td class="right">0x200</td>
    <td><i>write</i> 접근을 공유합니다.</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td class="right">1024</td>
    <td class="right">0x400</td>
    <td><i>delete</i> 접근을 공유합니다.</td>
  </tr>
</table>

<h3 id="EOL_options">줄 끝(End of line (EOL)) 옵션</h3>
<table class="info">
  <tr>
    <th class="sized center">Flag</th>
    <th class="sized right">십진수 값</th>
    <th class="sized right">십육진수 값</th>
    <th abbr="설명">설명</th>
  </tr>
  <tr>
    <td class="center">`n</td>
    <td class="right">4</td>
    <td class="right">0x4</td>
    <td>읽을 때 <code>`r`n</code>을 <code>`n</code>으로 교체합니다. 그리고 쓸 때 <code>`n</code>을 <code>`r`n</code>으로 교체합니다.</td>
  </tr>
  <tr>
    <td class="center">`r</td>
    <td class="right">8</td>
    <td class="right">0x8</td>
    <td>읽을 때 나홀로 <code>`r</code>을 <code>`n</code>으로 교체합니다.</td>
  </tr>
</table>

<h2 id="Return_Value">반환 값</h2>
<p>파일이 성공적으로 열리면, 반환 값은 <a href="../objects/File.htm">파일 객체</a>입니다.</p>
<p>함수가 실패하면, 반환 값은 0이고 <span class="ver">[in AHK_L 54+]</span> <a href="../Variables.htm#LastError">A_LastError</a>는 에러 코드가 담깁니다.</p>
<p>함수가 성공했는지 점검하려면 <code>if file</code> 또는 <code>IsObject(file)</code>를 사용하십시오.</p>

<h2 id="Remarks">논평</h2>
<p>UTF-8 또는 UTF-16 파일이 생성될 때, 바이트 순서 표식이 파일에 씌여집니다. <b>단,</b> <i>Encoding</i> (또는 <i>Encoding</i>을 생략하면 <a href="FileEncoding.htm">A_FileEncoding</a>)에 <code>UTF-8-RAW</code> 또는 <code>UTF-16-RAW</code>이 담겨 있는 경우는 예외입니다.</p>
<p>UTF-8 또는 UTF-16 바이트 순서 표식(byte order mark (BOM))을 담고 있는 파일이 읽기 접근을 위해 열릴 때, BOM은 파일 포인터를 그 다음으로 이동해서 출력으로부터 제외됩니다. 그러므로, <code>File.Position</code>은 파일을 열고 난후 즉시 3 또는 2를 보고합니다.</p>

<h2 id="Related">관련 항목</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="../objects/File.htm">파일 객체</a>, <a href="FileRead.htm">FileRead</a></p>

<h2 id="Examples">예제</h2>

<div class="ex" id="writeread">
<p><a class="ex_number" href="#writeread"></a> 텍스트를 파일에 쓴다음 다시 메모리로 읽어 들입니다 (<a href="DllCall.htm#file">다음 DllCall-예제</a>와 기능이 같습니다).</p>
<pre>FileSelectFile, FileName, S16,, Create a new file:
if (FileName = "")
    return
file := FileOpen(FileName, "w")
if !IsObject(file)
{
    MsgBox Can't open "%FileName%" for writing.
    return
}
TestString := "This is a test string.`r`n"  <em>; 파일을 이런 식으로 쓸 때,  `n 말고 `r`n을 사용하여 새 줄을 시작하십시오.</em>
file.Write(TestString)
file.Close()

<em>; 파일에 썼으므로 이제 다시 그 내용을 메모리로 읽어 들입니다.</em>
file := FileOpen(FileName, "r-d") <em>; 파일을 읽습니다 ("r"),  지우기 ("-d")만 빼고 모든 접근을 공유합니다.</em>
if !IsObject(file)
{
    MsgBox Can't open "%FileName%" for reading.
    return
}
CharsToRead := StrLen(TestString)
TestString := file.Read(CharsToRead)
file.Close()
MsgBox The following string was read from the file: %TestString%</pre>
</div>

<div class="ex" id="ExReadLine">
<p><a class="ex_number" href="#ExReadLine"></a> 읽기 전용 모드로 스크립트를 엽니다. 그리고 그의 첫 줄을 읽습니다.</p>
<pre>file := FileOpen(A_ScriptFullPath, "r")
MsgBox % file.ReadLine()</pre>
</div>

<div class="ex" id="ExStreams">
<p><a class="ex_number" href="#ExStreams"></a> Demonstrates the usage of the standard input/output streams.</p>
<pre><em>; 다음 데모를 보여주기 위해 콘솔 창을 엽니다:</em>
DllCall("AllocConsole")
<em>; 어플리케이션의 stdin/stdout 스트림을 새줄-변환 모드로 엽니다.</em>
stdin  := FileOpen("*", "r `n")  <em>; <span class="ver">[v1.1.17+]</span> 필요</em>
stdout := FileOpen("*", "w `n")
<em>; 예전 버전에는 다음을 사용합니다:
;   stdin  := FileOpen(DllCall("GetStdHandle", "int", -10, "ptr"), "h `n")
;   stdout := FileOpen(DllCall("GetStdHandle", "int", -11, "ptr"), "h `n")</em>
stdout.Write("Enter your query.`n\&gt; ")
stdout.Read(0) <em>; 쓰기 버퍼를 비웁니다.</em>
query := RTrim(stdin.ReadLine(), "`n")
stdout.WriteLine("Your query was '" query "'. Have a nice day.")
stdout.Read(0) <em>; 쓰기 버퍼를 비웁니다.</em>
Sleep 5000
</pre>
</div>
</body>
</html>
