<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>NumPut() - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The NumPut function stores a number in binary format at the specified address+offset." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut()</h1>
<p>지정된 주소-오프셋에 이진 형식으로 숫자를 저장합니다.</p>
<pre class="Syntax"><span class="func">NumPut</span>(Number, VarOrAddress <span class="optional">, Offset := 0</span><span class="optional">, Type := "UPtr"</span>)</pre>

<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>Number</dt>
  <dd><p>저장할 숫자.</p></dd>

  <dt>VarOrAddress</dt>
  <dd>
		<p>메모리 주소 또는 변수. <em>VarOrAddress</em>가 <code>MyVar</code> 같은 변수 이면, 그 변수의 문자열 버퍼의 주소가 사용됩니다. 이것은 보통 <code>&amp;MyVar</code>를 건네는 것과 동등하지만, "&amp;"를 생략하면 더 수행성능이 좋고 목표 주소 + 오프셋이 <a href="VarSetCapacity.htm">유효</a>하다는 확신을 할 수 있습니다.</p>
		<p>변수에 목표 주소가 <em>담겨 있으면</em> <strong>변수 참조를 건네지 마십시오</strong>; 그 경우, <code>MyVar+0</code>와 같은 표현식을 건네십시오.</p>
	</dd>

  <dt>Offset</dt>
  <dd><p>상대거리(오프셋) - 바이트 단위 - <em>VarOrAddress</em>에 더해져서 목표 주소를 결정합니다.</p></dd>

  <dt>Type</dt>
  <dd>
    <p>비어 있거나 생략하면, 기본값은 UPtr입니다. Otherwise, specify UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr.</p>
    <p>UInt64 is supported in <span class="ver">[v1.0.48+]</span> by allowing large unsigned values to be passed as strings. In earlier versions and for all other integer types, or when passing pure integers, signed vs. unsigned does not affect the result due to the use of two's complement to represent signed integers.</p>
    <p>DllCall()와 다르게, 이것들은 문자 그대로의 문자열로 사용될 때 반드시 따옴표로 둘러 싸야 합니다.</p>
    <p>자세한 것은 <a href="DllCall.htm#types">DllCall 유형</a>을 참조하십시오.</p>
  </dd>

</dl>

<h2 id="Return_Value">반환 값</h2>
<p>목표 주소가 유효하지 않으면, 빈 문자열이 돌아옵니다. 그렇지만, 어떤 무효 주소는 그런 식으로 탐지할 수 없습니다. 그래서 예상치 못한 행위를 야기할 수 있습니다.</p>
<p>그렇지 않으면, 방금 씌여진 항목의 오른쪽 주소가 반환됩니다. 이것은 예를 들어 DllCall()에 사용할 구조체에서 다른 유형의 숫자를 연속적으로 쓸 때 보통 사용됩니다.</p>

<h2 id="General_Remarks">총평</h2>
<p>정수가 너무 커서 지정된 <em>Type</em>에 맞지 않으면, 제일 중요한 비트(MSB)가 무시됩니다; 예, <code>NumPut(257, var, 0, "Char")</code>는 숫자 1을 저장합니다.</p>
<p>세 개의 매개변수만 존재하면, 세 번째 매개변수는 <em>Offset</em> 또는 <em>Type</em>일 수 있습니다. 예를 들어, <code>NumPut(x, var, "int")</code>는 유효합니다.</p>

<h2 id="Related">관련 항목</h2>
<p><a href="NumGet.htm">NumGet()</a>, <a href="DllCall.htm">DllCall()</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>


</body>
</html>
