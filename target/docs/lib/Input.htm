<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Input - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Input command waits for the user to type a string." />
<meta name="ahk:equiv-v2" content="commands/InputHook.htm" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Input</h1>

<p>사용자가 문자열을 타자하기를 기다립니다.</p>

<pre class="Syntax"><span class="func">Input</span> <span class="optional">, OutputVar, Options, EndKeys, MatchList</span></pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>OutputVar</dt>
  <dd><p>사용자가 입력한 텍스트를 저장할 변수의 이름 (기본값으로, 인위적 입력도 나포됩니다).</p>
      <p>이 매개변수 그리고 다른 매개변수들이 생략되면, 또다른 <a href="../misc/Threads.htm">쓰레드</a>에서 진행 중인 Input이 즉시 종료됩니다. 그리고 그의 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 단어 NewInput이 설정됩니다. 대조적으로, 현재 명령어의 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 이전 Input이 종료되었으면 0이 설정됩니다. 또는 종료할 이전 Input이 없었으면 1이 설정됩니다.</p>
      <p><em>OutputVar</em>는 사실상 키눌림을 저장하지 않습니다. 대신에, 키눌림으로 생산되는 문자들을 활성 창의 키보드 레이아웃/언어에 맞게 저장합니다. 결과적으로, 문자를 생산하지 않는 키눌림은 (예를 들어 <kbd>PgUp</kbd> 그리고 <kbd>Home</kbd>) 저장되지 않습니다 (그렇지만 아래의 <em>EndKeys</em> 매개변수를 통하여 인지할 수 있습니다).</p>
      <p class="warning"><strong>Note:</strong> <kbd>Esc</kbd> is translated to the ASCII ESC character, <code>Chr(27)</code>. This can be avoided by including <code>{Esc}</code> in <em>EndKeys</em>, in which case pressing <kbd>Esc</kbd> will terminate Input.</p>
      <p>Whitespace characters such as <kbd>Tab</kbd> (`t) are stored literally. <kbd>Enter</kbd>는 라인피드 (`n)로 저장됩니다.</p></dd>

  <dt>Options</dt>
  <dd><p><u>다른 기호로 구성되는 문자열 (순서에 상관없이, 사이에 선택적으로 스페이스 허용):</u></p>
      <p><strong>B</strong>: <kbd>Backspace</kbd> is ignored. Normally, pressing <kbd>Backspace</kbd> during an Input will remove the most recently pressed character from the end of the string. 주의: If the input text is visible (such as in an editor) and the arrow keys or other means are used to navigate within it, <kbd>Backspace</kbd> will still remove the last character rather than the one behind the caret (insertion point).</p>
      <p><strong>C</strong>: 대소문자 구분. 보통, <em>MatchList</em>는 대소문자를 구분하지 않습니다 (1.0.43.03 이전에서는 오직 A-Z 기호만 대소문자로 변화된다고 인지합니다. ü/Ü와 같은 기호는 인지하지 않습니다).</p>
      <p><strong>I</strong>: Ignore input generated by the <a href="Send.htm#SendEvent">SendEvent</a> method if it has a <a href="SendLevel.htm">send level</a> of 0. 그렇지만 <a href="Send.htm#SendInput">SendInput</a> 그리고 <a href="Send.htm#SendPlay">SendPlay</a> 방법은 이 설정에 상관 없이 언제나 무시됩니다. <span class="ver">[v1.1.31+]:</span> The option letter can be followed by a number to set the minimum send level. <code>I</code> and <code>I1</code> are equivalent, and <code>I0</code> is the same as not specifying the option.</p>
      <p><strong>L</strong>: 길이 제한 (예, <code>L5</code>). 최대로 허용되는 입력 길이. 텍스트가 이 길이에 도달하면, Input은 종료하고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 단어 Max가 설정됩니다. 단, 텍스트가 <em>MatchList</em> 문구 중 하나에 부합하는 경우는 예외입니다. 이 경우 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 단어 Match가 설정됩니다. If unspecified, the length limit is 16383, which is also the absolute maximum in versions prior to <span class="ver">[v1.1.31]</span>.</p>
      <p><strong>M</strong>: <kbd>Ctrl</kbd>+<kbd>A</kbd>부터 <kbd>Ctrl</kbd>+<kbd>Z</kbd>까지의 변형 키눌림은 실제 ASCII 문자가그에 상응한다면 인지되고 변환됩니다. 다음 예제를 연구해 보십시오. <kbd>Ctrl</kbd>+<kbd>C</kbd>를 인지합니다:</p>
      <pre>CtrlC := Chr(3) <em>; Ctrl-C에 대한 문자를 CtrlC 변수에 저장합니다.</em>
Input, OutputVar, L1 M
if (OutputVar = CtrlC)
    MsgBox, Control-C를 눌렀습니다.
ExitApp</pre>
      <p class="note"><strong>주의</strong>: <kbd>Ctrl</kbd>+<kbd>A</kbd>부터 <kbd>Ctrl</kbd>+<kbd>Z</kbd>까지의 문자는 <a href="Chr.htm">Chr(1)</a>부터 <a href="Chr.htm">Chr(26)</a>에 상응합니다. 또한, <strong>M</strong> 옵션 때문에 <kbd>Ctrl</kbd>+<kbd>←</kbd>와 같이 어떤 키보드 단축키는 Input이 진행 중인 동안 잘못된 행위를 할 수 있습니다.</p>
      <p><strong>T</strong>: Timeout (예, <code>T3</code>). 입력을 종료하고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 단어 Timeout을 설정하기 전에 기다릴 초의 개수. 입력 시간이 초과하면, <em>OutputVar</em>는 사용자가 그 동안 타자한 모든 것들이 설정됩니다. 이 값은 부동 소수점 수일 수 있습니다. 예를 들어 <code>2.5</code>.</p>
      <p id="vis"><strong>V</strong>: Visible. 보통, 사용자의 입력을 막습니다 (시스템으로부터 숨습니다). 이 옵션을 사용하면 사용자의 키눌림을 활성 창에 전달할 수 있습니다.</p>
      <p id="asterisk"><strong>*</strong>: Wildcard (아무데나 찾음). 보통, 사용자가 타자한 것은 정확하게 <em>MatchList</em> 문구 중 하나에 부합해야 일치가 일어납니다. 이 옵션을 사용하면 입력 테스트의 전체 길이를 검색해서 부합을 좀 더 많이 찾을 수 있습니다.</p>
      <p id="E"><strong>E</strong> <span class="ver">[v1.1.20+]</span>: 키 코드가 아니라 문자 코드로 한-문자 종료 키를 처리합니다. 이렇게 하면 활성 창의 키보드 레이아웃이 스크립트의 키보드 레이아웃과 다를 경우 결과가 더 일관성이 있습니다. 또한 실제로 주어진 종료 문자를 생성하지 않는 키 조합이 입력을 종료하지 못하도록 막습니다; 예를 들어, <code>@</code>가 종료 키이면, (E 옵션이 사용될 경우) US 레이아웃에서 <kbd>Shift</kbd>+<kbd>2</kbd>는 촉발되지만 <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>2</kbd>는 촉발되지 않습니다. <strong>C</strong> 옵션도 사용된다면, 종료 키는 대소문자를 구분합니다.</p>
      </dd>

  <dt>EndKeys</dt>
  <dd><p>키로 구성된 리스트, 그 중에 하나가 눌리면 입력을 종료합니다 (<em>EndKey</em> 자체는 <em>OutputVar</em>에 씌여지지 않습니다). 입력이 이런 식으로 종료될 때, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 단어 EndKey 다음에 쌍점 그리고 <em>EndKey</em>이름이 설정됩니다. 예제: <code>EndKey:.</code>, <code>EndKey:Escape</code>.</p>
      <p><em>EndKey</em> 리스트는 <a href="Send.htm">Send</a> 명령어와 비슷한 형식을 사용합니다. 예를 들어, <code>{Enter}.{Esc}</code>를 지정하면 <kbd>Enter</kbd>, <kbd>.</kbd>, 또는 <kbd>Esc</kbd>가 입력을 종료시킵니다. 활괄호 자체를 종료 키로 사용하려면, <code>{{}</code> 그리고/또는 <code>{}}</code>을 지정하십시오.</p>
      <p><kbd>Ctrl</kbd>, <kbd>Alt</kbd>, 또는 <kbd>Shift</kbd>를 종료 키로 사용하려면, 그 키의 중립 버전이 아니라, 좌/우 버전을 사용하십시오. 예를 들어, <code>{Control}</code>가 아니라 <code>{LControl}{RControl}</code>로 지정하십시오.</p>
      <p><span class="ver">[v1.0.14+]</span>: Although modified keys such as <kbd>Alt</kbd>+<kbd>C</kbd> (!c) are not supported, certain characters that require <kbd>Shift</kbd> to be held down -- namely punctuation marks such as <code>?!:@&amp;{}</code> -- are supported. <span class="ver">[v1.1.20+]</span>: Other characters are supported with the <strong>E</strong> option described above. When the <strong>E</strong> and <strong>M</strong> options are both used, <kbd>Ctrl</kbd>+<kbd>A</kbd> through <kbd>Ctrl</kbd>+<kbd>Z</kbd> are supported by including the corresponding ASCII control characters in <em>EndKeys</em>.</p>
      <p><code>{vkFF}</code>와 같이 명시적인 가상 키 보드도 역시 지정할 수 있습니다. 이것은 키에 이름도 없고 건네질 때 보이는 문자도 생산하지 않는 아주 희귀한 경우에 유용합니다. 그의 가상 키 코드는 다음과 같이 종료할 수 있습니다. 아래 <a href="../KeyList.htm#SpecialKeys">키 리스트 페이지</a>에 있는 단계를 따르십시오.</p>
    </dd>

  <dt>MatchList</dt>
  <dd><p>키 문구를 쉼표로-가른 리스트. 이 문구에 부합하면 Input은 종료됩니다 (그 경우 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 단어 Match가 설정됩니다). 사용자가 타자한 모든 것은 정확하게 이 문구 중 하나에 부합해야 일치가 일어납니다 (단, <a href="#asterisk">* 옵션</a>이 있는 경우는 예외입니다). 게다가, <strong>구분 쉼표 둘레에 있는 스페이스나 탭은 의미가 있습니다</strong>. 즉, 부합 문자열의 일부가 됩니다. 예를 들어, <em>MatchList</em>가 <code>ABC , XYZ</code>이라면, 사용자가 ABC 뒤에 또는 XYZ 앞에 스페이스를 타자해야 부합이 일어납니다.</p>
      <p>연속적인 두 개의 쉼표는 글자 그대로의 쉼표 하나가 결과입니다. 예를 들어, 다음은 문자열의 끝에 문자 그대로의 쉼표 하나를 생산합니다: <code>string1,,,string2</code>. 비슷하게, 다음 목록에는 항목 하나가 들어 있고 그 안에 글자 그대로의 쉼표가 하나 들어 있습니다: <code>single,,item</code>.</p>
    <p><em>MatchList</em> 안의 항목들은 개별적인 매개변수로 취급되지 않기 때문에, 리스트는 변수 안에 완전히 포함될 수 있습니다. 실제로, 그의 길이가 16383 문자를 넘어서면 변수 안에 일부만 포함됩니다. 그 길이가 스크립트 줄의 최대 길이이기 때문입니다. 예를 들어, <em>MatchList</em>는 <code>%List1%,%List2%,%List3%</code>으로 구성될 수 있습니다 -- 여기에서 각 변수는 부합 문구의 방대한 부-리스트를 담고 있습니다.</p>
    </dd>

</dl>

<h2 id="Error_Handling">에러 처리</h2>
<p><span class="ver">[v1.1.04+]</span>: 이 명령어는 아무 매개변수 없이 호출되었는데 Input이 진행 중이지 않으면 예외를 던질 수 있습니다. 더 자세한 정보는 <a href="Catch.htm#RuntimeErrors">실행시간 에러</a>를 참조하십시오.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to one of the following values:</p>
<table class="info">
  <tr>
    <th style="width:15%">Value</th>
    <th abbr="설명">설명</th>
  </tr>
  <tr>
    <td><p>1 또는 0</p></td>
    <td><p>이 명령어가 매개변수 없이 사용될 때마다, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 이전 입력이 성공적으로 종료하면 0이 설정되고, 아무 Input도 진행되지 않고 있으면 1이 설정됩니다.</p></td>
  </tr>
  <tr>
    <td>NewInput</td>
    <td>Input이 Input 명령어를 사용하는 또다른 <a href="../misc/Threads.htm">쓰레드</a>에 의하여 인터럽트 되었습니다.</td>
  </tr>
  <tr>
    <td>Max</td>
    <td>Input이 허용된 최대 길이에 도달하였습니다. 그리고 <em>MatchList</em> 안의 항목에 부합하지 못했습니다.</td>
  </tr>
  <tr>
    <td>Timeout</td>
    <td>Input 시간 제한 초과.</td>
  </tr>
  <tr>
    <td>Match</td>
    <td>Input이 <em>MatchList</em> 안의 항목 중 하나에 부합합니다.</td>
  </tr>
  <tr>
    <td>EndKey:<em>Name</em></td>
    <td>
      <p><em>EndKeys</em> 중 하나가 눌렸습니다. Input을 종료합니다. 이 경우, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 단어 EndKey가 담기고 다음에 쌍점 하나와 활괄호 없이 종료 키의 이름이 따라옵니다. 예, <code>EndKey:Enter</code>, <code>EndKey:Escape</code>, 등등.</p>
      <p><em>Name</em>이 키의 "정규화 된" 이름임을 주목하십시오. <em>EndKeys</em>에 어떻게 씌여져 있는지는 상관이 없습니다. 예를 들어, <code>{Esc}</code> 그리고 <code>{vk1B}</code>는 모두 <code>EndKey:Escape</code>를 생산합니다. <a href="GetKey.htm">GetKeyName()</a>를 사용하면 정규화된 이름을 열람할 수 있습니다.</p>
      <p><a href="#E">E 옵션</a>이 사용되었다면, <em>Name</em>은 타자되어 들어 온 실제 문자입니다. 그렇지 않으면, 키 이름은 스크립트의 활성 키보드 레이아웃에 따라 결정됩니다.</p>
      <p><span class="ver">[v1.1.20]</span> 이전에서, 종료 키의 VK 코드가 0x41 (A)부터 0x5A (Z) 까지의 범위에 있다면, ErrorLevel은 보통 그에 상응하는 ASCII 문자를 담았습니다. 현재 키보드 레이아웃에 올바른가 아닌가는 상관이 없었습니다. <span class="ver">[v1.1.20]</span> 이후로, 올바른 문자가 사용됩니다. A부터 Z 범위의 문자가 사용되면, 하위 호환을 위해 대문자가 사용됩니다; 그렇지 않으면 보통 소문자입니다.</p>
    </td>
  </tr>
</table>

<h2 id="Remarks">논평</h2>
<p>Input이 이미 또다른 <a href="../misc/Threads.htm">쓰레드</a>에서 진행 중인 동안 이 명령어가 사용되면, 그 Input은 종료되고 그의 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 단어 NewInput이 설정됩니다. 그 이후 (매개변수가 주어지면), 새 Input이 시작됩니다.</p>
<p>Input이 진행 중인 동안에, <a href="Menu.htm">맞춤 메뉴 항목</a>과 <a href="SetTimer.htm">타이머 서브루틴</a>과 같은 새 <a href="../misc/Threads.htm">쓰레드</a>를 여전히 생성할 수 있습니다.</p>
<p>Keyboard <a href="../Hotkeys.htm">hotkeys</a> are still in effect while an Input is in progress, but cannot be triggered if any of the required modifier keys are suppressed, or if the hotkey uses the <em>reg</em> method and its suffix key is suppressed. For example, the hotkey <code>^+a::</code> <em>might</em> be overridden by Input, whereas <code>$^+a::</code> would take precedence over Input.</p>
<p>If the Input is not <a href="#vis">visible</a>, all keys are suppressed except the <a href="../KeyList.htm#modifier">standard modifier keys</a>, CapsLock, NumLock and ScrollLock. Even <em>EndKeys</em> and keystrokes which do not alter <em>OutputVar</em> are suppressed. For example, <kbd>Home</kbd> has no effect while <kbd>LWin</kbd>+<kbd>D</kbd> opens the Start menu (since <kbd>D</kbd> is suppressed but <kbd>LWin</kbd> is not).</p>
<p>스크립트가 처음으로 이 명령어를 사용할 때, (아직 설치되지 않았다면) <a href="_InstallKeybdHook.htm">키보드 갈고리</a>가 설치됩니다. 게다가, 이 스크립트는 <a href="_Persistent.htm">영속적</a>이 됩니다. 즉, <a href="ExitApp.htm">ExitApp</a>를 사용해야 종료할 수 있다는 뜻입니다. 키보드 갈고리는 다음 <a href="Suspend.htm">Suspend</a> 명령어나 <a href="Hotkey.htm">Hotkey</a> 명령어를 사용할 때까지 여전히 설치되어 있을 것입니다. 그 순간 핫키가 핫키가 요구하지 않으면 제거됩니다.</p>
<p>여러 언어나 키보드 레이아웃을 사용한다면, Input은 스크립트가 아니라 활성 창의 키보드 레이아웃을 사용합니다 (Input이 <a href="#vis">보이는지</a> 여부에 상관이 없습니다). 그렇지만, 1.0.44.03 이전은 스크립트 자신의 라이아웃이 사용됩니다.</p>
<p>그렇게 유연하지는 못하지만, <a href="../Hotstrings.htm">핫스트링</a>이 일반적으로 Input 명령어보다 더 사용하기 쉽습니다.</p>
<p><a href="InputHook.htm">InputHook()</a> is more flexible than the Input command.</p>

<h2 id="Related">관련 항목</h2>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../Hotstrings.htm">핫스트링</a>, <a href="InputBox.htm">InputBox</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="../misc/Threads.htm">쓰레드</a>, <a href="IfIn.htm">if var in/contains MatchList</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExAnyKey">
<p><a class="ex_number" href="#ExAnyKey"></a> Waits for the user to press any key. Keys that produce no visible character -- such as the modifier keys, function keys, and arrow keys -- are listed as end keys so that they will be detected too.</p>
<pre>Input, SingleKey, L1, {LControl}{RControl}{LAlt}{RAlt}{LShift}{RShift}{LWin}{RWin}{AppsKey}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{CapsLock}{NumLock}{PrintScreen}{Pause}</pre>
</div>

<div class="ex" id="ExHotkey">
<p><a class="ex_number" href="#ExHotkey"></a> 다음은 작동하는 핫키 예제입니다. 핫키에 틸드 (~) 접두 심볼이 있으므로, 키 눌림이 활성 창까지 뚫고 전달됩니다. 그래서, 편집기 안에서 <code>[btw</code>를 타자하면 (또는 기타 다른 부합하는 문구를 타자하면) 스크립트는 자동으로 여러분이 지정한 행위를 수행합니다 (예를 들어 타자된 텍스트를 교체합니다). For an alternative version of this example, see <a href="Switch.htm#ExInput">Switch</a>.</p>
<pre>~[::
Input, UserInput, V T5 L4 C, {enter}.{esc}{tab}, btw,otoh,fl,ahk,ca
if (ErrorLevel = "Max")
{
    MsgBox, You entered "%UserInput%", which is the maximum length of text.
    return
}
if (ErrorLevel = "Timeout")
{
    MsgBox, You entered "%UserInput%" at which time the input timed out.
    return
}
if (ErrorLevel = "NewInput")
    return
If InStr(ErrorLevel, "EndKey:")
{
    MsgBox, You entered "%UserInput%" and terminated the input with %ErrorLevel%.
    return
}
<em>; 그렇지 않으면, 부합이 발견되었습니다.</em>
if (UserInput = "btw")
    Send, {backspace 4}by the way
else if (UserInput = "otoh")
    Send, {backspace 5}on the other hand
else if (UserInput = "fl")
    Send, {backspace 3}Florida
else if (UserInput = "ca")
    Send, {backspace 3}California
else if (UserInput = "ahk")
    Run, https://www.autohotkey.com
return
</pre>
</div>

</body>
</html>
