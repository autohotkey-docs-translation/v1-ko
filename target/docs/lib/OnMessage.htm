<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>OnMessage() - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The OnMessage function specifies a function or function object to call automatically when the script receives the specified message." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>OnMessage()</h1>

<p>스크립트가 지정된 메시지를 받을 때 자동으로 호출할 <a href="../Functions.htm">함수</a> 또는 <a href="../objects/Functor.htm">함수 객체</a>를 지정합니다 .</p>

<pre class="Syntax"><span class="func">OnMessage</span>(MsgNumber <span class="optional">, Function, MaxThreads</span>)</pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>MsgNumber</dt>
  <dd><p>감시 또는 질의할 메시지 번호, 범위는 0부터 4294967295 (0xFFFFFFFF)까지. <a href="../misc/SendMessageList.htm">시스템 메시지</a> (즉, 0x0400 아래의 메시지)를 감시하고 싶지 않으면, 가능하면 4096 (0x1000)보다 더 큰 번호를 고르는 것이 제일 좋습니다. 이렇게 하면 오토핫키에 내부적으로 사용되는 메시지를 간섭할 기회가 줄어듭니다.</p></dd>

  <dt>Function</dt>
  <dd><p><a href="../Functions.htm">함수</a>의 이름, <span class="ver">[v1.1.20+]</span>에서는 <a href="../objects/Functor.htm">함수 객체</a>. 기호 그대로의 함수 이름을 건네려면, 따옴표로 둘러 싸야 합니다.</p>
  <p>어떻게 함수가 등록되는가 그리고 OnMessage의 반환 값은 이 매개변수가 문자열인가 아니면 함수 객체인가에 달려 있습니다. 더 자세한 것은 <a href="#Name_v_Object">함수 이름 vs 객체</a>를 참조하십시오.</p>
  </dd>

  <dt id="MaxThreads">MaxThreads <span class="ver">[v1.0.47+]</span></dt>
  <dd><p>이 정수는 보통 생략됩니다. 이 경우 감시 함수는 한 번에 한 <a href="../misc/Threads.htm">쓰레드</a>로 제한됩니다. 이것이 보통 제일 좋습니다. 그렇지 않으면 스크립트가 감시 함수가 자신을 호출하면 시간 순서가 엉망인 채로 메시지들을 처리하기 때문입니다. 그러므로, <em>MaxThreads</em>에 대한 대안으로서, <a href="#Critical">아래에</a> 기술하는 것처럼 <em>Critical</em>을 사용을 고려해 보십시오.</p>
  <p>If the monitor function directly or indirectly causes the message to be sent again while the function is still running, it is necessary to specify a <em>MaxThreads</em> value greater than 1 or less than -1 to allow the monitor function to be called for the new message (if desired). Messages sent (not posted) by the script's own process to itself cannot be delayed or buffered.</p>
  <p><span class="ver">[v1.1.20+]:</span> Specify 0 to unregister a previously registered function. If <em>Function</em> is a string, the "legacy" monitor is removed. Otherwise, only the given function object is unregistered.</p>
  <p><span class="ver">[v1.1.20+]:</span> 기본값으로, 여러 함수가 하나의 <em>MsgNumber</em>에 등록되어 있으면, 등록된 순서대로 호출됩니다. 이전에 등록된 함수보다 먼저 호출될 함수를 등록하려면, <em>MaxThreads</em>에 음수를 지정하십시오. 예를 들어, <code>OnMessage(Msg, Fn, -2)</code>는 이전에 <em>Msg</em>에 등록된 다른 어떤 함수보다도 먼저 <code>Fn</code>을 호출되도록 등록합니다. 그리고 <em>Fn</em>에 최대 2 개의 쓰레드를 허용합니다. 그렇지만, 그 함수가 이미 등록되어 있으면, 등록을 해제하고 다시 재등록 하지 않은 한 순서가 바뀌지 않습니다.</p></dd>

</dl>

<h2 id="Name_v_Object">함수 이름 vs 함수</h2>
<p>OnMessage의 반환 값과 행위는 <em>Function</em> 매개변수가 함수 이름인가 아니면 객체인가에 따라 다릅니다.</p>

<h3 id="Function_Name">함수 이름</h3>
<p>하위 호환을 위해, 각각의 유일한 <em>MsgNumber</em>를 감시하려면 기껏해야 한 개의 함수만 이름으로 등록할 수 있습니다 -- 이것을 "legacy" 감시라고 부릅니다.</p>
<p>legacy 감시 함수가 처음 등록되면, 이전에 등록된 감시 함수들 앞에 호출될지 뒤에 호출될지는 <em>MaxThreads</em> 매개변수에 달려 있습니다. 이 감시 함수가 다른 함수를 호출하도록 업데이트하더라도 먼저 등록해제 하지 않는 한 순서에 영향을 주지 않습니다.</p>
<p>다음 코드는 <em>MsgNumber</em>에 대하여 현재 legacy 감시 함수를 등록하거나 업데이트합니다 (변수를 건넨다면 따옴표는 생략합니다):</p>
<pre class="Syntax">Name := <span class="func">OnMessage</span>(MsgNumber, "FunctionName")</pre>
<p>반환 값은 다음 중 하나입니다:</p>
<ul>
  <li><a href="#Failure">실패</a>시 빈 문자열</li>
  <li>있었다면, 이전 함수의 이름</li>
  <li>그렇지 않으면, 새 함수의 이름.</li>
</ul>
<p>다음은 <em>MsgNumber</em>에 대하여 현재의 legacy 감시자를 (있다면) 등록을 해제하고 그의 이름을 돌려줍니다 (없으면 빈 값을 돌려줌):</p>
<pre class="Syntax">Name := <span class="func">OnMessage</span>(MsgNumber, "")</pre>
<p>다음은 <em>MsgNumber</em>에 대하여 현재의 legacy 감시자의 이름을 돌려줍니다 (없다면 빈 값을 돌려줌):</p>
<pre class="Syntax">Name := <span class="func">OnMessage</span>(MsgNumber)</pre>

<h3 id="Function_Object">함수 객체</h3>
<p>(<a href="../objects/Func.htm">정상 함수</a>를 포함하여) 갯수에 상관없이 얼마든지 <a href="../objects/Functor.htm">함수 객체</a>는 주어진 <em>MsgNumber</em>를 감시할 수 있습니다.</p>
<p>다음 두 줄은 이전에 등록한 함수들 <strong>다음에</strong> 호출될 함수 객체를 등록합니다:</p>
<pre class="Syntax">
<span class="func">OnMessage</span>(MsgNumber, FuncObj)     <em>; Option 1</em>
<span class="func">OnMessage</span>(MsgNumber, FuncObj, 1)  <em>; Option 2 (MaxThreads = 1)</em></pre>
<p>다음은 이전에 등록된 함수보다 <strong>먼저</strong> 호출될 함수 객체를 등록합니다:</p>
<pre class="Syntax"><span class="func">OnMessage</span>(MsgNumber, FuncObj, -1)</pre>
<p>함수 객체를 등록 해제하려면 <em>MaxThreads</em>에 0을 지정하십시오:</p>
<pre class="Syntax"><span class="func">OnMessage</span>(MsgNumber, FuncObj, 0)</pre>

<h2 id="Failure">실패</h2>
<p>실패는 <em>Function</em>이 다음과 같은 경우에 일어납니다:</p>
<ol>
  <li>객체가 아니거나, 사용자-정의 함수의 이름 또는 빈문자열입니다;</li>
  <li>매개변수를 다섯 개 이상 요구한다고 알려져 있습니다</li>
  <li>또는 <span class="ver">[v1.0.48.05]</span> 이전에서, <a href="../Functions.htm#ByRef">ByRef</a> 또는 <a href="../Functions.htm#optional">선택적</a> 매개변수를 가지고 있습니다.</li>
</ol>
<p><span class="ver">[v1.1.19.03]</span> 이전에서 실패는 이미 500 개의 메시지를 감시 중인데 스크립트가 새 메시지를 감시하려고 시도하는 경우에도 일어납니다.</p>
<p><em>Function</em>이 객체이면, 실패시 예외를 던집니다. 그렇지 않으면, 빈 문자열을 돌려줍니다.</p>

<h2 id="The_Functions_Parameters">함수의 매개변수</h2>
<p>여러 메시지를 감시하도록 할당된 <a href="../Functions.htm">함수</a>는 최대 네 개까지 매개변수를 받을 수 있습니다:</p>
<pre>MyMessageMonitor(wParam, lParam, msg, hwnd)
{
    ... body of function...
}</pre>
<p>매개변수에 건넨 이름에 상관 없이, 다음 정보가 순서대로 매개변수에 할당됩니다.:</p>
<ul>
  <li>매개변수 #1: 메시지의 WPARAM 값.</li>
  <li>매개변수 #2: 메시지의 LPARAM 값.</li>
  <li>매개변수 #3: 메시지 번호, 함수가 여러 메시지를 감시할 때 유용합니다.</li>
  <li>매개변수 #4: 메시지가 전송된 창이나 콘트롤의 HWND (유일한 ID). HWND는 <a href="../misc/WinTitle.htm#ahk_id">ahk_id</a>와 함께 사용할 수 있습니다.</li>
</ul>
<p>WPARAM 그리고 LPARAM은 스크립트의 실행 파일이 32-비트인지 64-비트인지에 따라 부호 없는 32-비트 정수이거나 (0부터 2<sup>32</sup>-1까지) 또는 부호 있는 64-비트 정수입니다 (-2<sup>63</sup>부터 2<sup>63</sup>-1까지). 32-비트 스크립트에 대하여, 들어오는 매개변수가 부호 있는 정수를 의도한다면, 음수는 다음 예제를 따라 노출시킬 수 있습니다:</p>
<pre>if (A_PtrSize = 4 &amp;&amp; wParam &gt; 0x7FFFFFFF)  <em>; <a href="../Variables.htm#PtrSize">A_PtrSize</a>를 점검해 스크립트가 32-비트임을 확인합니다.</em>
    wParam := -(~wParam) - 1</pre>
<p>상응하는 정보가 필요하지 않으면 리스트의 끝으로부터 하나 이상의 매개변수를 생략할 수 있습니다. 예를 들어, <code>MyMsgMonitor(wParam, lParam)</code>로 정의된 함수는 앞에서 두 개의 매개변수만 받습니다. 그리고 <code>MyMsgMonitor()</code>로 정의된 함수는 매개변수를 전혀 받지 않습니다.</p>

<h2 id="Additional_Information_Available_to_the_Function">함수에서 사용가능한 추가 정보</h2>
<p>위에서 받은 매개변수 말고도, 함수는 다음 내장 변수로부터 값들을 참고할 수도 있습니다:</p>
<ul>
  <li><a href="../Variables.htm#Gui">A_Gui</a>: 메시지가 GUI 창 또는 콘트롤에 전송되지 않았다면 비어 있습니다. 이 경우 A_Gui는 <a href="Gui.htm#MultiWin">Gui 창 번호</a>입니다 (이 창은 또 함수의 <a href="Gui.htm#DefaultWin">기본 GUI 창</a>으로 설정됩니다).</li>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>: 메시지가 GUI 콘트롤에 전송되지 않았다면 비어 있습니다. 이 경우 안에 콘트롤의 변수 이름이나 다른 값이 들어 있습니다. 자세한 것은 <a href="../Variables.htm#GuiControl">A_GuiControl</a>에 기술합니다. 어떤 콘트롤들은 어떤 종류의 메시지도 받지 않습니다. 예를 들어, 사용자가 <a href="GuiControls.htm#Text">텍스트 콘트롤</a>을 클릭할 때, 운영 체제는 WM_LBUTTONDOWN을 그 콘트롤이 아니라 부모 창에 전송합니다. A_GuiControl는 비어 있습니다.</li>
  <li><a href="../Variables.htm#GuiX">A_GuiX</a> 그리고 <a href="../Variables.htm#GuiY">A_GuiY</a>: 들어오는 메시지가 <a href="PostMessage.htm">SendMessage</a>를 통하여 전송되었다면 둘 모두 -2147483648가 담깁니다. <a href="PostMessage.htm">PostMessage</a>를 통하여 전송되었다면, 메시지가 포스트되는 순간에 (화면에 상대적인) 마우스 커서의 좌표가 담깁니다.</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: 메시지가 SendMessage를 통하여 전송되었다면 0이 담깁니다. PostMessage를 통하여 전송되었다면, 메시지가 포스트된 <a href="../Variables.htm#TickCount">틱-카운트 시간</a>이 담깁니다.</li>
</ul>
<p>감시 함수의 <a href="../misc/WinTitle.htm#LastFoundWindow">마지막 발견 창</a>은 메시지가 전송된 부모 창으로 시작합니다 (콘트롤에 전송되었어도 마찬가지입니다). 창은 숨어 있지만 GUI 창은 아니라면 (예를 들어 스크립트의 메인 창), 사용하기 전에 먼저 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>를 켜십시오. 예를 들어:</p>
<pre>DetectHiddenWindows On
MsgParentWindow := WinExist()  <em>; 메시지가 전송된 창의 유일한 ID를 저장합니다.</em></pre>

<h2 id="What_the_Function_Should_Return">함수는 무엇을<em>돌려주어야 하는가 </em></h2>
<p>감시 함수가 매개변수 없이 <a href="Return.htm">Return</a>을 사용하거나, ""와 같은 빈 값을 지정하면 (또는 전혀 Return을 사용하지 않으면), 들어오는 메시지는 함수가 끝날 때 정상적으로 처리됩니다. 함수가 종료하거나(<a href="Exit.htm">Exits</a>) 존재하지 않는 파일을 <a href="Run.htm">실행하는</a> 실행시간 에러를 야기하더라도 같은 일이 일어납니다. 대조적으로, 정수를 돌려주면, 그 메시지는 즉시 반송됩니다; 즉, 프로그램은 메시지를 더 이상 처리하지 않습니다. 예를 들어, WM_LBUTTONDOWN (0x0201)을 감시하는 함수가 정수를 돌려주면 목표 창은 마우스 클릭이 일어난 사실을 고지 받지 못합니다. 많은 경우 (예를 들어 <a href="PostMessage.htm">PostMessage</a>를 통하여 도착하는 메시지의 경우), 어떤 정수가 반환되어도 상관하지 않습니다; 그러나 잘 모르겠다면, 0이 보통 가장 안전합니다.</p>
<p>유효한 반환 값의 범위는 스크립트의 실행파일이 32-비트인가 64-비트인가에 따라 다릅니다. 비어 있지 않은 값은 반드시 범위가 32비트-스크립트에 대하여 (<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 4</code>) -2<sup>31</sup>부터 2<sup>32</sup>-1까지 그리고 64-비트 스크립트에 대하여(<code><a href="../Variables.htm#PtrSize">A_PtrSize</a> = 8</code>) -2<sup>63</sup>부터 2<sup>63</sup>-1까지입니다.</p>
<p><span class="ver">[v1.1.20+]:</span> 하나의 메시지에 대하여 여러 감시 함수가 있다면, 비어 있지 않은 값을 돌려줄 때까지 하나씩 호출됩니다.</p>

<h2 id="Remarks">총평</h2>
<p>정상 함수-호출과 다르게, 감시 메시지가 도착하면 함수는 새로운 <a href="../misc/Threads.htm">쓰레드</a>로 호출됩니다. 이 때문에, 함수는 <a href="SendMode.htm">SendMode</a> 그리고 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a>과 같은 기본값을 가지고 새롭게 시작합니다. 이 기본값은 <a href="../Scripts.htm#auto">자동-실행 섹션</a>에서 바꿀 수 있습니다.</p>
<p>콘트롤에 (포스트 방식이 아니라) 센드 방식으로 전송되는 메시지는 관제되지 않습니다. 왜냐하면 시스템은 그런 메시지들을 화면 뒤의 콘트롤에 직접 보내 버리기 때문입니다. 이런 일은 시스템에서-생성되는 메시지들에는 별로 문제가 되지 않습니다. 왜냐하면 대부분 포스트 방식으로 전송되기 때문입니다..</p>
<p>OnMessage를 호출하는 스크립트는 자동으로 <a href="_Persistent.htm">영속적</a>이 됩니다. 또한 단일 실체이기도 합니다. 단, <a href="_SingleInstance.htm">#SingleInstance</a>를 사용하여 오버라이드된 경우는 예외입니다.</p>
<p><p id="Critical">If a message arrives while its function is still running due to a previous arrival of the same message, by default the function will not be called again; instead, the message will be treated as unmonitored. If this is undesirable, there are multiple ways it can be avoided:</p>
<ul>
  <li>If the message is posted rather than sent and has a number greater than 0x0311, it can be buffered until its function completes by specifying <a href="Critical.htm">Critical</a> as the first line of the function. Alternatively, <a href="Thread.htm">Thread Interrupt</a> can achieve the same effect as long as it lasts long enough for the function to finish.</li>
  <li><span class="ver">[v1.0.46+]:</span> Using <a href="Critical.htm">Critical</a> to increase the <a href="Critical.htm#Interval">message check interval</a> gives the function more time to complete before any messages are dispatched. An interval greater than 16 may be needed for reliability. Due to the granularity of the system timer (usually 15.6 milliseconds), the default interval of 5 milliseconds (for non-Critical threads) or 15 milliseconds (for Critical threads) might appear to pass the instant after the function starts.</li>
  <li>Ensuring that the monitor function returns quickly reduces the risk that messages will be missed due to <em>MaxThreads</em>. One way to do this is to have it queue up a future thread by <a href="PostMessage.htm">posting</a> to its own script a monitored message number greater than 0x0311. That message's function should use <a href="Critical.htm">Critical</a> as its first line to ensure that its messages are buffered. Alternatively, a <a href="SetTimer.htm">timer</a> can be used to queue up a future thread.</li>
  <li>Specifying a higher value for the <a href="#MaxThreads">MaxThreads</a> parameter allows the function to be interrupted to process the newly-received message.</li>
</ul>
<p id="buffering">If a monitored message that is numerically greater than 0x0311 is posted while the script is <a href="../misc/Threads.htm#Interrupt">uninterruptible</a>, the message is buffered; that is, its function is not called until the script becomes interruptible. However, messages which are sent rather than posted cannot be buffered as they must provide a return value. Posted messages also might not be buffered when a modal message loop is running, such as for a system dialog, ListView drag-drop operation or menu.</p>
<p>When a monitored message arrives, if it is not buffered and the script is uninterruptible merely due to the settings of <a href="Thread.htm">Thread Interrupt</a> or <a href="Critical.htm">Critical</a>, the current thread will be interrupted so that the function can be called. However, if the script is absolutely uninterruptible -- such as while a <a href="Menu.htm">menu</a> is displayed, a <a href="SetKeyDelay.htm">KeyDelay</a>/<a href="SetMouseDelay.htm">MouseDelay</a> is in progress, or the clipboard is being <a href="_ClipboardTimeout.htm">opened</a> -- the message's function will not be called and the message will be treated as unmonitored.</p>
<p>OnMessage 쓰레드의 <a href="../misc/Threads.htm">우선 순위</a>는 언제나 0입니다. 결과적으로 현재 쓰레드의 우선 순위가 0보다 높으면 어떤 메시지도 관제되지 않고 버퍼 처리되지 않습니다.</p>
<p>(0x0400미만의) 시스템 메시지는 주의해서 사용해야 합니다. 예를 들어, 감시 함수가 빨리 일을 끝내지 못하면, 그 메시지에 대한 응답은 시스템의 예상보다 훨씬 더 걸립니다. 이 때문에 부작용을 야기할 수 있습니다. 감시 프로그램이 더 이상의 메시지 처리를 억누르기 위해 정수를 돌려주면 원하지 않는 행위가 일어날 수도 있습니다. 시스템은 다른 처리 다른 응답을 예상하고 있기 때문입니다.</p>
<p>스크립트가 <a href="MsgBox.htm">MsgBox</a>와 같은 시스템 창을 보여주고 있을 때, 콘트롤에 포스트되는 메시지는 모두 관제가 되지 않습니다. 예를 들어, 스크립트가 메시지 상자를 보여주고 있고 사용자가 GUI 창에 버튼을 클릭하면, WM_LBUTTONDOWN 메시지는 감시 함수를 호출하지 않고 직접 버튼에 전송됩니다.</p>
<p>외부 프로그램은 PostThreadMessage() 또는 기타 API 호출을 통하여 메시지를 직접 스크립트의 쓰레드에 포스트할 수 있지만, 이것은 권장하지 않습니다. 왜냐하면 그 메시지들은 스크립트가 <a href="MsgBox.htm">메시지 상자</a> 같은 시스템 창을 보여주고 있는 중이라면 소실되어 버리기 때문입니다. 대신에, 보통 스크립트의 메인 창이나 그의 GUI 창 중의 하나에 메시지를 보내는 것이 가장 좋습니다 (send vs post).</p>
<h2 id="Related">관련 항목</h2>
<p><a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="OnExit.htm#function">OnExit()</a>, <a href="OnExit.htm#command">OnExit</a>, <a href="OnClipboardChange.htm#function">OnClipboardChange()</a>, <a href="OnClipboardChange.htm#label">OnClipboardChange 라벨</a>, <a href="PostMessage.htm">Post/SendMessage</a>, <a href="../Functions.htm">함수</a>, <a href="../misc/SendMessageList.htm">창 메시지 목록</a>, <a href="../misc/Threads.htm">쓰레드</a>, <a href="Critical.htm">Critical</a>, <a href="DllCall.htm">DllCall()</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExLButtonDown">
<p><a class="ex_number" href="#ExLButtonDown"></a> GUI 창에서 마우스 클릭을 감시합니다. 관련 주제: <a href="Gui.htm#GuiContextMenu">GuiContextMenu</a></p>
<pre>Gui, Add, Text,, 이 창 아무데나 클릭하십시오.
Gui, Add, Edit, w200 vMyEdit
Gui, Show
OnMessage(0x0201, "WM_LBUTTONDOWN")
return

WM_LBUTTONDOWN(wParam, lParam)
{
    X := lParam &amp; 0xFFFF
    Y := lParam &gt;&gt; 16
    if A_GuiControl
        Ctrl := "`n(in control " . A_GuiControl . ")"
    ToolTip Gui #%A_Gui% 창에서 클라이언트 좌표 %X%x%Y%.%Ctrl%에 왼클릭 했습니다.
}

GuiClose:
ExitApp</pre>
</div>

<div class="ex" id="shutdown">
<p><a class="ex_number" href="#shutdown"></a> Detects system shutdown/logoff and allows the user to abort it. On Windows Vista and later, the system displays a user interface showing which program is blocking shutdown/logoff and allowing the user to force shutdown/logoff. On older OSes, the script displays a confirmation prompt. 관련 주제: <a href="OnExit.htm">OnExit</a></p>
<pre><em>; 다음 DllCall은 선택적입니다: OS에게 이 스크립트를 (다른 모든 어플리케이션보다) 먼저 닫으라고 명령합니다.</em>
DllCall("kernel32.dll\SetProcessShutdownParameters", "UInt", 0x4FF, "UInt", 0)
OnMessage(0x0011, "WM_QUERYENDSESSION")
return

WM_QUERYENDSESSION(wParam, lParam)
{
    ENDSESSION_LOGOFF := 0x80000000
    if (lParam &amp; ENDSESSION_LOGOFF)  <em>; 사용자가 로그오프중입니다.</em>
        EventType := "Logoff"
    else  <em>; 시스템은 셧다운 또는 재시작 중입니다.</em>
        EventType := "Shutdown"
    try
    {
        <em>; Set a prompt for the OS shutdown UI to display.  We do not display
        ; our own confirmation prompt because we have only 5 seconds before
        ; the OS displays the shutdown UI anyway.  Also, a program without
        ; a visible window cannot block shutdown without providing a reason.</em>
        BlockShutdown("Example script attempting to prevent " EventType ".")
        return false
    }
    catch
    {
        <em>; ShutdownBlockReasonCreate is not available, so this is probably
        ; Windows XP, 2003 or 2000, where we can actually prevent shutdown.</em>
        MsgBox, 4,, %EventType% in progress.  Allow it?
        IfMsgBox Yes
            return true  <em>; OS에게 셧다운/로그오프를 계속 허용하도록 명령합니다.</em>
        else
            return false  <em>; OS에게 셧다운/로그오프를 취소하도록 명령합니다.</em>
    }
}

BlockShutdown(Reason)
{
    <em>; If your script has a visible GUI, use it instead of A_ScriptHwnd.</em>
    DllCall("ShutdownBlockReasonCreate", "ptr", A_ScriptHwnd, "wstr", Reason)
    OnExit("StopBlockingShutdown")
}

StopBlockingShutdown()
{
    OnExit(A_ThisFunc, 0)
    DllCall("ShutdownBlockReasonDestroy", "ptr", A_ScriptHwnd)
}</pre>
</div>

<div class="ex" id="ExCustom">
<p><a class="ex_number" href="#ExCustom"></a> 스크 프로그램으로부터 맞춤 메시지와 최대 두 개의 숫자를 받도록 만듭니다 (숫자 대신에 문자열을 전송하려면, 이 다음 예제를 보십시오).</p>
<pre>OnMessage(0x5555, "MsgMonitor")
OnMessage(0x5556, "MsgMonitor")

MsgMonitor(wParam, lParam, msg)
{
    <em>; 신속하게 돌아가는 것이 중요하다면, ToolTip을 사용하는 편이 더 좋습니다.</em>
    <em>; MsgBox 같은 경우는 함수가 일을 끝내지 못하도록 방해하기 때문입니다:</em>
    ToolTip Message %msg% arrived:`nWPARAM: %wParam%`nLPARAM: %lParam%
}

<em>; 다음을 다른 스크립트 안에서 사용하면 위의 스크립트 안에서 함수를 실행할 수 있습니다:</em>
SetTitleMatchMode 2
DetectHiddenWindows On
if WinExist("Name of Receiving Script.ahk ahk_class AutoHotkey")
    PostMessage, 0x5555, 11, 22  <em>; 이 메시지는 위의 WinExist() 때문에 "<a href="../misc/WinTitle.htm#LastFoundWindow">마지막 발견 창</a>"으로 전송됩니다.</em>
DetectHiddenWindows Off  <em>; PostMessage가 끝날 때까지 끄면 안됩니다.</em></pre>
</div>

<div class="ex" id="SendString">
<p><a class="ex_number" href="#SendString"></a> 문자열을 길이에 상관없이 한 스크립트에서 다른 스크립트로 전송합니다. To use this, save and run both of the following scripts then press <kbd>Win</kbd>+<kbd>Space</kbd> to show an input box that will prompt you to type in a string. Both scripts must use the same <a href="../Concepts.htm#native-encoding">native encoding</a>.</p>
<p>다음 스크립트를 <strong>Receiver.ahk</strong>로 저장하고 기동시키십시오.</p>
<pre filename="Receiver.ahk">#SingleInstance
OnMessage(0x004A, "Receive_WM_COPYDATA")  <em>; 0x004A은 WM_COPYDATA입니다</em>
return

Receive_WM_COPYDATA(wParam, lParam)
{
    StringAddress := NumGet(lParam + 2*A_PtrSize)  <em>; CopyDataStruct의 lpData 멤버를 받습니다.</em>
    CopyOfData := StrGet(StringAddress)  <em>; 구조체로부터 문자열을 복사합니다.</em>
    <em>; 그것을 ToolTip vs. MsgBox로 보여줍니다. 그래서 적절한 시간에 돌려줄 수 있습니다:</em>
    ToolTip %A_ScriptName%`nReceived the following string:`n%CopyOfData%
    return true  <em>;  1 (true)을 돌려주는 것이 이 메시지를 승인하는 전통적인 방식입니다.</em>
}</pre>
<p>다음 스크립트를 <strong>Sender.ahk</strong>로 저장한 다음 기동시키십시오. 그 다음, <kbd>Win</kbd>+<kbd>Space</kbd> 핫키를 누르십시오.</p>
<pre filename="Sender.ahk">TargetScriptTitle := "Receiver.ahk ahk_class AutoHotkey"

#space::  <em>; Win+Space 핫키. 누르면 메시지 문자열을 입력할 입력 박스가 나타납니다.</em>
InputBox, StringToSend, Send text via WM_COPYDATA, Enter some text to Send:
if ErrorLevel  <em>; 사용자가 취소 버튼을 눌렀습니다.</em>
    return
result := Send_WM_COPYDATA(StringToSend, TargetScriptTitle)
if (result = "FAIL")
    MsgBox SendMessage failed. Does the following WinTitle exist?:`n%TargetScriptTitle%
else if (result = 0)
    MsgBox Message sent but the target window responded with 0, which may mean it ignored it.
return

Send_WM_COPYDATA(ByRef StringToSend, ByRef TargetScriptTitle)  <em>; ByRef는 이 경우 메모리를 상당히 절약해 줍니다.
; 다음 함수는 지정된 문자열을 지정된 창에 전송하고 응답을 돌려줍니다.
; 목표 창이 메시지를 처리했으면 응답은 1입니다. 또는 무시했다면 0입니다.</em>
{
    VarSetCapacity(CopyDataStruct, 3*A_PtrSize, 0)  <em>; 구조체이 메모리 구역을 설정합니다.</em>
    <em>; 먼저 구조체의 cbData 멤버에 문자열의 크기를 설정합니다. 그의 0 종료문자를 포함합니다:</em>
    SizeInBytes := (StrLen(StringToSend) + 1) * (A_IsUnicode ? 2 : 1)
    NumPut(SizeInBytes, CopyDataStruct, A_PtrSize)  <em>; OS의 요구대로 이렇게 처리합니다.</em>
    NumPut(&amp;StringToSend, CopyDataStruct, 2*A_PtrSize)  <em>; lpData에 문자열 자체를 가리키도록 설정합니다.</em>
    Prev_DetectHiddenWindows := A_DetectHiddenWindows
    Prev_TitleMatchMode := A_TitleMatchMode
    DetectHiddenWindows On
    SetTitleMatchMode 2
    TimeOutTime := 4000  <em>; Optional. Milliseconds to wait for response from receiver.ahk. 기본 값은 5000입니다</em>
    <em>; Must use SendMessage not PostMessage.</em>
    SendMessage, 0x004A, 0, &amp;CopyDataStruct,, %TargetScriptTitle%,,,, %TimeOutTime% <em>; 0x004A은 WM_COPYDATA입니다.</em>
    DetectHiddenWindows %Prev_DetectHiddenWindows%  <em>; 호출자에 대하여 원래 설정을 복구합니다.</em>
    SetTitleMatchMode %Prev_TitleMatchMode%         <em>; 위와 같습니다.</em>
    return ErrorLevel  <em>; SendMessage의 응답을 다시 호출자에게 전송합니다.</em>
}</pre>
</div>

<p>See the <a href="../scripts/index.htm#WinLIRC">WinLIRC client script</a> for a demonstration of how to use OnMessage() to receive notification when data has arrived on a network connection.</p>

</body>
</html>
