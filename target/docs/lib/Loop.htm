<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Loop - Syntax &amp; Usage | AutoHotkey</title>
<meta name="description" content="The Loop statement performs a series of code lines repeatedly: either the specified number of times or until a Break statement is encountered." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Loop (보통)</h1>

<p>일련의 명령어들을 반복적으로 수행합니다: 지정된 횟수만큼 또는 <a href="Break.htm">break</a>를 만날 때까지.</p>

<pre class="Syntax"><span class="func">Loop</span> <span class="optional">, Count</span></pre>
<h2 id="Parameters">매개변수</h2>
<dl>

  <dt>Count</dt>
  <dd><p>회돌이를 수행할 (반복) 횟수. 생략되면, 회돌이는 <a href="Break.htm">break</a> 또는 <a href="Return.htm">return</a>을 만날 때까지 무한히 계속됩니다.</p>
      <p><em>Count</em>가 %ItemCount%와 같은 변수 참조이면, 회돌이는 변수가 비거나 1보다 작은 숫자를 포함할 때 완전히 건너 뜁니다.</p>
      <p><a href="LoopFile.htm">파일-패턴 회돌이</a>를 지원할 필요가 있기 때문에, <em>Count</em>는 표현식이 되면 안됩니다. 그렇지만, 모든 비-표현식 매개변수처럼, 앞에다 %와 스페이스 하나를 두면 강제로 표현식처럼 사용할 수 있습니다. 예를 들어: <code>Loop % Count + 1</code>. 그런 경우, 표현식은 회돌이가 시작되기 전에 오직 한 번만 평가됩니다.</p></dd>

</dl>

<h2 id="Remarks">논평</h2>
<p>회돌이 명령어는 보통 다음 <a href="Block.htm">블록</a>이 따라옵니다. 블록은 회돌이의 <em>몸</em>을 형성하는 서술문 집단입니다. 그렇지만, 서술문이 하나만 있는 회돌이는 블록을 요구하지 않습니다 ("if" 그리고 그의 "else"는 이런 목적으로 하나의 서술문으로 계수됩니다).</p>
<p>이 명령어의 일반적인 사용법은 무한 회돌이입니다. <a href="Break.htm">break</a> 명령어를 회돌이의 <em>몸</em> 어딘가에 사용해 회돌이를 끝낼 때를 결정합니다.</p>
<p>회돌이 안에 <a href="Break.htm">break</a>와 <a href="Continue.htm">continue</a>를 사용하는 것을 적극 권장합니다. <a href="Goto.htm">goto</a>는 자제하십시오. 왜냐하면 일반적으로 스크립트를 더 이해하기 어렵게 만들고 유지관리하기도 더 힘들게 만들기 때문입니다. One can also create a "While" or "Do...While/Until" loop by making the first or last statement of the loop's <em>body</em> an IF statement that conditionally issues the <a href="Break.htm">break</a> command, but the use of <a href="While.htm">While</a> or <a href="Until.htm">Loop...Until</a> is usually preferred.</p>
<p>내장 변수 <strong>A_Index</strong>에는 현재 회돌이 반복 횟수가 담깁니다. 회돌이의 <em>몸체</em>가 처음 실행될 때 1이 담기고, 그 다음 실행 때 2가 담깁니다; 등등. 내부 회돌이가 외부 회돌이로 둘러 싸여 있다면, 내부 회돌이가 우선 순위가 있습니다. A_Index는 모든 유형의 회돌이에 작동합니다. 여기에는 <a href="LoopFile.htm">파일-회돌이</a>와 <a href="LoopReg.htm">레지스트리-회돌이</a>가 포함됩니다; 그러나 A_Index는 회돌이 밖이면 0이 담깁니다.</p>
<p><a href="Block.htm#otb">One True Brace (OTB) 스타일</a>을 선택적으로 정상 회돌이에 사용할 수 있습니다 (그러나 특별한 회돌이에는 안됩니다. 예를 들어 <a href="LoopFile.htm">파일-패턴 회돌이</a> 그리고 <a href="LoopParse.htm">파싱 회돌이</a>). 예를 들어:</p>
<pre>Loop {
    ...
}
Loop %RepeatCount% {
    ...
}</pre>
<p>특수 회돌이: 회돌이를 사용해 자동으로 파일, 폴더, 레지스트리 항목을 (한 번에 하나씩) 열람할 수 있습니다. 자세한 것은 <a href="LoopFile.htm">파일-회돌이</a> 그리고 <a href="LoopReg.htm">레지스트리-회돌이</a>를 참조하십시오. 게다가, <a href="LoopReadFile.htm">파일-읽기 회돌이</a>는 파일의 전체 내용을 한 번에 한 줄씩 처리할 수 있습니다. 마지막으로, <a href="LoopParse.htm">파싱 회돌이</a>는 가름자로 구분된 문자열 안에 포함된 개별 필드들을 처리할 수 있습니다.</p>
<h2 id="Related">관련 항목</h2>
<p><a href="Until.htm">Until</a>, <a href="While.htm">While-회돌이</a>, <a href="For.htm">For-회돌이</a>, <a href="LoopFile.htm">파일과 폴더 회돌이</a>, <a href="LoopReg.htm">레지스트리 회돌이</a>, <a href="LoopReadFile.htm">파일-읽기 회돌이</a>, <a href="LoopParse.htm">파싱 회돌이</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">블록</a></p>
<h2 id="Examples">예제</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Creates a loop with 3 iterations.</p>
<pre>Loop, 3
{
    MsgBox, 반복 숫자는 %A_Index%입니다.  <em>; A_Index는 1, 2, 그 다음에 3이 됩니다</em>
    Sleep, 100
}</pre>
</div>

<div class="ex" id="ExBreakContinue">
<p><a class="ex_number" href="#ExBreakContinue"></a> Creates an infinite loop, but it will be terminated after the 25th iteration.</p>
<pre>Loop
{
    if (A_Index &gt; 25)
        break  <em>; 회돌이를 종료합니다</em>
    if (A_Index &lt; 20)
        continue <em>; 아래를 건너 뛰고 새 반복을 시작합니다</em>
    MsgBox, A_Index = %A_Index% <em>; 이 곳은 숫자를 20부터 25 까지만 보여줍니다.</em>
}</pre>
</div>

</body>
</html>
