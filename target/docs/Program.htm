<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Using the Program | AutoHotkey</title>
<meta name="description" content="Learn details about creating, editing and running a script, the tray icon, the main window, command line usage, portability and installer options." />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>
<h1>Using the Program</h1>
<p>AutoHotkey doesn't do anything on its own; it needs a script to tell it what to do. A script is simply a plain text file with the <code>.ahk</code> filename extension containing instructions for the program, like a configuration file, but much more powerful. A script can do as little as performing a single action and then exiting, but most scripts define a number of <a href="Hotkeys.htm">hotkeys</a>, with each hotkey followed by one or more actions to take when the hotkey is pressed.</p>
<pre>#z::Run https://www.autohotkey.com  <em>; Win+Z</em>

^!n::  <em>; Ctrl+Alt+N</em>
if WinExist("Untitled - Notepad")
    WinActivate
else
    Run Notepad
return</pre>
<p><strong>Tip:</strong> If your browser supports it, you can download any code block (such as the one above) as a script file by clicking the button which appears in the top-right of the code block when you hover your mouse over it.</p>

<h2 id="toc">목차</h2>
<ul>
  <li><a href="#create">Create a Script</a></li>
  <li><a href="#edit">Edit a Script</a></li>
  <li><a href="#run">Run a Script</a></li>
  <li><a href="#tray-icon">Tray Icon</a></li>
  <li><a href="#main-window">Main Window</a></li>
  <li><a href="#embedded-scripts">Embedded Scripts</a></li>
  <li><a href="#cmd">Command Line Usage</a></li>
  <li><a href="#portability">AutoHotkey.exe의 호환성</a></li>
  <li><a href="#install">설치 옵션</a>
  <ul>
    <li><a href="#Installer_uiAccess">Run with UI Access</a></li>
  </ul></li>
</ul>

<h2 id="create">Create a Script</h2>
<p>There are a couple of common ways to create a script file:</p>
<ul>
  <li>In Notepad (or a <a href="lib/Edit.htm#Editors">text editor</a> of your choice), save a file with the <code>.ahk</code> filename extension. On some systems you may need to enclose the name in quotes to ensure the editor does not add another extension (such as .txt).
  <p class="note">Be sure to save the file as UTF-8 with BOM if it will contain non-ASCII characters. For details, see the <a href="FAQ.htm#nonascii">FAQ</a>.</p></li>
  <li>In Explorer, right-click in empty space in the folder where you want to save the script, then select <strong>New</strong> and <strong>AutoHotkey Script</strong>. You can then type a name for the script (taking care not to erase the <code>.ahk</code> extension if it is visible).</li>
</ul>
<p class="note">See <a href="Language.htm">Scripting Language</a> for details about how to write a script.</p>

<h2 id="edit">Edit a Script</h2>
<p>To open a script for editing, right-click on the script file and select <strong>Edit Script</strong>. If the script is already running, you can use the <a href="lib/Edit.htm">Edit</a> command or right-click the script's <a href="#tray-icon">tray icon</a> and select <strong>Edit This Script</strong>. By default this will open Notepad, but that can be changed by writing to the registry as shown <a href="lib/Edit.htm#Example">here</a>. Of course, you can always open your text editor first and then open the script as you would any other text file.</p>
<p>After editing a script, you must run or <a href="lib/Reload.htm">reload</a> the script for the changes to take effect. A running script can usually be reloaded via its <a href="#tray-icon">tray menu</a>.</p>

<h2 id="run">Run a Script</h2>
<p>With AutoHotkey installed, there are several ways to run a script:</p>
<ul>
<li>Double-click a script file (or shortcut to a script file) in Explorer.</li>
<li>Call AutoHotkey.exe on the command line and pass the script's filename as a <a href="Scripts.htm#cmd">command-line parameter</a>.</li>
<li>After creating <a href="Scripts.htm#defaultfile">the default script</a>, launch AutoHotkey via the shortcut in the Start menu to run it.</li>
<li>If AutoHotkey is pinned to the taskbar or Start menu on Windows 7 or later, recent or pinned scripts can be launched via the program's Jump List.</li>
</ul>
<p>Most scripts have an effect only while they are running. Use the <a href="#tray-icon">tray menu</a> or the <a href="lib/ExitApp.htm">ExitApp</a> command to exit a script. Scripts are also forced to exit when Windows shuts down. To configure a script to start automatically after the user logs in, the easiest way is to place a shortcut to the script file in the <a href="Variables.htm#Startup">Startup</a> folder.</p>
<p>Scripts can also be <a href="Scripts.htm#ahk2exe">compiled</a>; that is, combined together with an AutoHotkey binary file to form a self-contained executable (.exe) file.</p>

<h2 id="tray-icon">Tray Icon</h2>
<p>By default, each script adds its own icon to the taskbar notification area (commonly known as the tray).</p>
<p>The tray icon usually looks like this (but the color or letter changes when the script is <a href="lib/Pause.htm">paused</a> or <a href="lib/Suspend.htm">suspended</a>): <img src="static/ahk16.png" alt="H"></p>
<p>Right-click the tray icon to show the tray menu, which has the following options by default:</p>
<ul>
<li>Open - Open the script's <a href="#main-window">main window</a>.</li>
<li>Help - Open the AutoHotkey offline help file.</li>
<li>Window Spy - Displays various information about a window.</li>
<li>Reload This Script - See <a href="lib/Reload.htm">Reload</a>.</li>
<li>Edit This Script - See <a href="lib/Edit.htm">Edit</a>.</li>
<li>Suspend Hotkeys - <a href="lib/Suspend.htm">Suspend</a> or unsuspend hotkeys.</li>
<li>Pause Script - <a href="lib/Pause.htm">Pause</a> or unpause the script.</li>
<li>Exit - Exit the script.</li>
</ul>
<p>By default, double-clicking the tray icon shows the script's <a href="#main-window">main window</a>.</p>
<p>The <a href="lib/Menu.htm">Menu</a> command can be used to customise the tray icon and menu.</p>
<p>The <a href="lib/_NoTrayIcon.htm">#NoTrayIcon</a> directive can be used to hide the tray icon.</p>

<h2 id="main-window">Main Window</h2>
<p>The script's main window is usually hidden, but can be shown via the <a href="#tray-icon">tray icon</a> or one of the commands listed below to gain access to information useful for debugging the script. Items under the <strong>View</strong> menu control what the main window displays:</p>
<ul>
<li>Lines most recently executed - See <a href="lib/ListLines.htm">ListLines</a>.</li>
<li>Variables and their contents - See <a href="lib/ListVars.htm">ListVars</a>.</li>
<li>Hotkeys and their methods - See <a href="lib/ListHotkeys.htm">ListHotkeys</a>.</li>
<li>Key history and script info - See <a href="lib/KeyHistory.htm">KeyHistory</a>.</li>
</ul>
<p><strong>Known issue:</strong> Keyboard shortcuts for menu items do not work while the script is displaying a <a href="lib/MsgBox.htm">message box</a> or other dialog.</p>
<p>The built-in variable <a href="Variables.htm#ScriptHwnd">A_ScriptHwnd</a> contains the unique ID (HWND) of the script's main window.</p>
<p>Closing this window with <a href="lib/WinClose.htm">WinClose</a> (even from another script) causes the script to exit, but most other methods just hide the window and leave the script running.</p>
<p>Minimizing the main window causes it to automatically be hidden. This is done to prevent any owned windows (such as GUI windows or certain dialog windows) from automatically being minimized, but also has the effect of hiding the main window's taskbar button. To instead allow the main window to be minimized normally, override the default handling with <a href="lib/OnMessage.htm">OnMessage</a>. 예를 들어:</p>
<pre>; This prevents the main window from hiding on minimize:
OnMessage(0x0112, Func("PreventAutoMinimize")) <em>; WM_SYSCOMMAND = 0x0112</em>
OnMessage(0x0005, Func("PreventAutoMinimize")) <em>; WM_SIZE = 0x0005
; This prevents owned GUI windows (but not dialogs) from automatically minimizing:</em>
OnMessage(0x0018, Func("PreventAutoMinimize"))

PreventAutoMinimize(wParam, lParam, uMsg, hwnd) {
    if (uMsg = 0x0112 &amp;&amp; wParam = 0xF020 &amp;&amp; hwnd = A_ScriptHwnd) { <em>; SC_MINIMIZE = 0xF020</em>
        WinMinimize
        return 0 <em>; Prevent main window from hiding.</em>
    }
    if (uMsg = 0x0005 &amp;&amp; wParam = 1 &amp;&amp; hwnd = A_ScriptHwnd) <em>; SIZE_MINIMIZED = 1</em>
        return 0 <em>; Prevent main window from hiding.</em>
    if (uMsg = 0x0018 &amp;&amp; lParam = 1) <em>; SW_PARENTCLOSING = 1</em>
        return 0 <em>; Prevent owned window from minimizing.</em>
}</pre>

<h3 id="title">Main Window Title</h3>
<p>The title of the script's main window is used by the <a href="lib/_SingleInstance.htm">#SingleInstance</a> and <a href="lib/Reload.htm">Reload</a> mechanisms to identify other instances of the same script. <a href="lib/WinSetTitle.htm">Changing the title</a> prevents the script from being identified as such. The default title depends on how the script was loaded:</p>
<table class="info">
  <tr><th>Loaded From</th><th>Title Expression</th><th>예제</th></tr>
  <tr><td>.ahk file</td><td><code>A_ScriptFullPath " - AutoHotkey v" A_AhkVersion</code></td><td>E:\My Script.ahk - AutoHotkey v1.1.33.09</td></tr>
  <tr><td>Main resource (compiled script)</td><td><code>A_ScriptFullPath</code></td><td>E:\My Script.exe</td></tr>
  <tr><td>Any other resource</td><td><code>A_ScriptFullPath " - " A_LineFile</code></td><td>E:\My AutoHotkey.exe - *BUILTIN-TOOL.AHK</td></tr>
</table>
<p>The following code illustrates how the default title could be determined by the script itself (but the actual title can be retrieved with <a href="lib/WinGetTitle.htm">WinGetTitle</a>):</p>
<pre>
title := A_ScriptFullPath
if !A_IsCompiled
    title .= " - AutoHotkey v" A_AhkVersion
<em>; For the correct result, this must be evaluated by the resource being executed,
; not an #include (unless the #include was merged into the script by Ahk2Exe):</em>
else if SubStr(A_LineFile, 1, 1) = "*" &amp;&amp; A_LineFile != "*#1"
    title .= " - " A_LineFile
</pre>

<h2 id="embedded-scripts">Embedded Scripts <span class="ver">[v1.1.34+]</span></h2>
<p>Scripts may be embedded into a standard AutoHotkey .exe file by adding them as Win32 (RCDATA) resources using the <a href="Scripts.htm#ahk2exe">Ahk2Exe compiler</a>. To add additional scripts, see the <a href="misc/Ahk2ExeDirectives.htm#AddResource">AddResource</a> compiler directive.</p>
<p>An embedded script can be specified on the command line or with <a href="lib/_Include.htm">#Include</a> by writing an asterisk (*) followed by the resource name. For an integer ID, the resource name must be a hash sign (#) followed by a decimal number.</p>
<p>The program may automatically load script code from the following resources, if present in the file:</p>
<table class="info">
  <tr><th>ID</th><th>Spec</th><th>사용법</th></tr>
  <tr>
    <td>1</td><td>*#1</td>
    <td>This is the means by which a <a href="Scripts.htm#ahk2exe">compiled script</a> is created from an .exe file. This script is executed automatically and most command line switches are passed to the script instead of being interpreted by the program. External scripts and alternative embedded scripts can be executed by using the <a href="Scripts.htm#SlashScript">/script</a> switch.</td>
  </tr>
  <tr>
    <td>2</td><td>*#2</td>
    <td>If present, this script is automatically "included" before any script that the program loads, and before any file specified with <a href="Scripts.htm#SlashInclude">/include</a>.</td>
  </tr>
</table>
<p>When the source of the main script is an embedded resource, the program acts in "compiled script" mode, with the exception that <a href="Variables.htm#AhkPath">A_AhkPath</a> always contains the path of the current executable file (the same as <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a>). For resources other than *#1, the resource specifier is included in <a href="#title">the main window's title</a> to support <a href="lib/_SingleInstance.htm">#SingleInstance</a> and <a href="lib/Reload.htm">Reload</a>.</p>
<p>When referenced from code that came from an embedded resource, <a href="Variables.htm#LineFile">A_LineFile</a> contains an asterisk (*) followed by the resource name.</p>

<h2 id="cmd">Command Line Usage</h2>
<p>See <a href="Scripts.htm#cmd">Passing Command Line Parameters to a Script</a> for command line usage, including a list of command line switches which affect the program's behavior.</p>

<h2 id="portability">AutoHotkey.exe의 호환성</h2>
<p>AutoHotkey.exe 파일만 있으면 어떤 .ahk 스크립트도 실행할 수 있습니다.</p>
<p><span class="ver">[AHK_L 51+]:</span> AutoHotkey.exe 이름을 바꾸면 <a href="Scripts.htm#defaultfile">기본값으로</a> 실행되는 스크립트의 이름도 바뀝니다. 오토핫키를 설치하지 않고 컴퓨터에 사용하기 위해 스크립트를 컴파일하는 방법의 대안이 될 수 있습니다. 예를 들면, <i>MyScript</i>.exe는 파일이름이 주어지지 않으면 자동으로 <i>MyScript</i>.ahk를 실행합니다. 그러나 다른 스크립트도 역시 실행할 수 있습니다.</p>

<h2 id="install">설치 옵션</h2>
<p>조용하게 오토핫키는 기본 디렉토리에 설치하려면 (유/소음 모드에서 보여주는 디렉토리), 매개변수 /S를 설치기에 건네면 됩니다. 예를 들어:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S</pre>
<p>기본 디렉토리 말고 다른 디렉토리에 설치하려면 /D 매개변수로 지정합니다 ( /S가 없을 경우, 설치기가 보여주는 기본 디렉토리가 변경됩니다). 예를 들어:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S /D=C:\Program Files\AutoHotkey</pre>
<p><strong>Version</strong>: 오토핫키가 벌써 설치되어 있다면, 자동으로 어느 버전의 AutoHotkey.exe인지 탐지하여 기본값으로 설정합니다. 그렇지 않으면, 기본값은 유니코 32-비트 또는 유니코드 64-비트로서 OS가 64-비트인가 아닌가에 따라 달라집니다. 기본값으로 설정된 AutoHotkey.exe 버전을 오버라이드 하려면, 다음 스위치 중 하나를 건네면 됩니다:</p>
<ul>
  <li><code>/A32</code> 또는 <code>/ANSI</code>: ANSI 32-비트.</li>
  <li><code>/U64</code> 또는 <code>/x64</code>: 유니코드 64-비트 (64-비트 운영체제에서만 유효함).</li>
  <li><code>/U32</code>: 유니코드 32-bit.</li>
</ul>
<p>예를 들어, 다음은 조용하게 ANSI 32-비트를 기본값으로 설정하고 설치합니다:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /S /A32</pre>
<p><strong>Uninstall</strong>: 조용하게 AutoHotkey를 제거하려면, <code>/Uninstall</code> 매개변수를 Installer.ahk에 건넵니다. 예를 들어:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\AutoHotkey.exe" "C:\Program Files\AutoHotkey\Installer.ahk" /Uninstall</pre>
<p>AutoHotkey가 1.1.08.00 이전 버전이라면, <code>uninst.exe /S</code>를 사용하십시오. 예를 들어:</p>
<pre class="no-highlight">"C:\Program Files\AutoHotkey\uninst.exe" /S</pre>
<p><strong>주의:</strong> Installer.ahk는 관리자 권한으로 실행해야 제대로 작동합니다.</p>
<p><strong>Extract</strong> <span class="ver">[v1.1.09.04+]</span>: A link is present in the bottom-right corner of the installer GUI to extract files without installing, and the <code>/E</code> switch can be used to invoke it from the command line. 예를 들어:</p>
<pre class="no-highlight">AutoHotkey_1.1.34.03_setup.exe /D=F:\AutoHotkey /E</pre>
<p><strong>Restart scripts</strong> <span class="ver">[v1.1.19.02+]</span>: 조용한 설치/제거 모드에서 스크립트를 실행하면 필요한 경우 자동으로 닫힙니다. <code>/R</code> 스위치를 건네면 실행 중인 EXE를 이용하여 자동으로 이런 스크립트를 재적재할 수 있습니다. 명령어 줄 인자가 <strong>필요 없습니다</strong>. Setup will attempt to launch the scripts via Explorer, so they do not run as administrator if UAC is enabled.</p>

<p id="Installer_IsHostApp"><strong>Taskbar buttons</strong> <span class="ver">[v1.1.08+]</span>: On Windows 7 and later, taskbar buttons for multiple scripts are automatically grouped together or combined into one button by default. The <em>Separate taskbar buttons</em> option disables this by registering each AutoHotkey executable as a <a href="https://msdn.microsoft.com/ko-kr/library/ee872121#APPLICATIONS">host app (IsHostApp)</a>.</p>
<p><span class="ver">[v1.1.24.02+]:</span> For command-line installations, specify <code>/IsHostApp</code> or <code>/IsHostApp=1</code> to enable the option and <code>/IsHostApp=0</code> to disable it.</p>

<h3 id="Installer_uiAccess">Run with UI Access <span class="ver">[v1.1.24.02+]</span></h3>
<p>The installer GUI has an option "Add 'Run with UI Access' to context menus". This context menu option provides a workaround for common <a href="FAQ.htm#uac">UAC-related issues</a> by allowing the script to automate administrative programs - without the script running as admin. To achieve this, the installer does the following:</p>
<ul>
  <li>Copies AutoHotkeyA32.exe, AutoHotkeyU32.exe and (if present) AutoHotkeyU64.exe to AutoHotkey*_UIA.exe.</li>
  <li>Sets the <a href="https://msdn.microsoft.com/ko-kr/library/ee671610">uiAccess attribute</a> in each UIA file's embedded manifest.</li>
  <li>Creates a self-signed digital certificate named "AutoHotkey" and signs each UIA file.</li>
  <li>Registers the context menu option to run the appropriate exe file.</li>
</ul>
<p>If any these UIA files are present before installation, the installer will automatically update them even if the UI Access option is not enabled.</p>
<p>For command-line installations, specify <code>/uiAccess</code> or <code>/uiAccess=1</code> to enable the option and <code>/uiAccess=0</code> to disable it. By default, the installer will enable the option if UAC is enabled and the UI Access context menu option was present before installation.</p>
<p>Scripts which need to run other scripts with UI access can simply <a href="lib/Run.htm">Run</a> the appropriate UIA.exe file with the normal <a href="#cmd">command line parameters</a>.</p>
<p><strong>알려진 한계</strong>:</p>
<ul>
  <li>UIA is only effective if the file is in a trusted location; i.e. a Program Files sub-directory.</li>
  <li>UIA.exe files created on one computer cannot run on other computers without first installing the digital certificate which was used to sign them.</li>
  <li>UIA.exe files cannot be started via CreateProcess due to security restrictions. ShellExecute can be used instead. <a href="lib/Run.htm">Run</a> tries both.</li>
  <li>UIA.exe files cannot be modified, as it would invalidate the file's digital signature.</li>
  <li>Because UIA programs run at a different "integrity level" than other programs, they can only access objects registered by other UIA programs. For example, <code><a href="lib/ComObjActive.htm">ComObjActive</a>("Word.Application")</code> will fail because Word is not marked for UI Access.</li>
  <li>The script's own windows can't be automated by non-UIA programs/scripts for security reasons.</li>
  <li>Running a non-UIA script which uses a mouse hook (even as simple as <code>#InstallMouseHook</code>) may prevent all mouse hotkeys from working when the mouse is pointing at a window owned by a UIA script, even hotkeys implemented by the UIA script itself. A workaround is to ensure UIA scripts are loaded last.</li>
</ul>
<p>For more details, see <a href="https://www.autohotkey.com/board/topic/70449-enable-interaction-with-administrative-programs/">Enable interaction with administrative programs</a> on the archive forum.</p>

</body>
</html>
